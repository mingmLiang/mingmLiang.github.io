<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[vue组件的使用]]></title>
      <url>%2F2017%2F09%2F05%2Fvue%E7%BB%84%E4%BB%B6%E4%BD%BF%E7%94%A8%2F</url>
      <content type="text"><![CDATA[vue组件的使用注意：这里说的是在vue项目中使用vue组件 首先搭建起vue项目 首先要安装 node.js(推荐使用稳定版本) 打开命令行，安装脚手架(一个快速搭建vue项目的工具) 1npm install --global vue-cli 使用脚手架，创建一个基于 webpack 模板的新项目,my-project指的是项目名称 1vue init webpack my-project 进入项目目录，加入依赖。（就是添加node_modules包） 12cd my-projectcnpm install 运行项目 1npm run dev vue组件在vue项目中如何简单使用下面实现在别的组件，引入组件，并且父组件传参给子组件 首先在src-components-header.vue中，新建组件start-start.vue 子组件start.vue的全部代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596&lt;template&gt; &lt;div class=&quot;star&quot; :class=&quot;starType&quot;&gt; &lt;span v-for=&quot;(itemClass,index) in itemClasses&quot; :class=&quot;itemClass&quot; class=&quot;star-item&quot; key=&quot;index&quot;&gt;&lt;/span&gt; &lt;/div&gt;&lt;/template&gt;&lt;script type=&quot;text/ecmascript-6&quot;&gt; const LENGTH = 5; const CLS_ON = &apos;on&apos;; const CLS_HALF = &apos;half&apos;; const CLS_OFF = &apos;off&apos;; export default &#123; props: &#123; size: &#123; type: Number &#125;, score: &#123; type: Number &#125; &#125;, computed: &#123; starType() &#123; return &apos;star-&apos; + this.size; &#125;, itemClasses() &#123; let result = []; let score = Math.floor(this.score * 2) / 2; let hasDecimal = score % 1 !== 0; let integer = Math.floor(score); for (let i = 0; i &lt; integer; i++) &#123; result.push(CLS_ON); &#125; if (hasDecimal) &#123; result.push(CLS_HALF); &#125; while (result.length &lt; LENGTH) &#123; result.push(CLS_OFF); &#125; return result; &#125; &#125; &#125;;&lt;/script&gt;&lt;style lang=&quot;stylus&quot; rel=&quot;stylesheet/stylus&quot;&gt; @import &quot;../../common/stylus/mixin.styl&quot; .star font-size: 0 .star-item display: inline-block background-repeat: no-repeat &amp;.star-48 .star-item width: 20px height: 20px margin-right: 22px background-size: 20px 20px &amp;:last-child margin-right: 0 &amp;.on bg-image(&apos;star48_on&apos;) &amp;.half bg-image(&apos;star48_half&apos;) &amp;.off bg-image(&apos;star48_off&apos;) &amp;.star-36 .star-item width: 15px height: 15px margin-right: 6px background-size: 15px 15px &amp;:last-child margin-right: 0 &amp;.on bg-image(&apos;star36_on&apos;) &amp;.half bg-image(&apos;star36_half&apos;) &amp;.off bg-image(&apos;star36_off&apos;) &amp;.star-24 .star-item width: 10px height: 10px margin-right: 3px background-size: 10px 10px &amp;:last-child margin-right: 0 &amp;.on bg-image(&apos;star24_on&apos;) &amp;.half bg-image(&apos;star24_half&apos;) &amp;.off bg-image(&apos;star24_off&apos;)&lt;/style&gt; 关键点：接受父组件的参数123456789export default &#123; props: &#123; size: &#123; type: Number &#125;, score: &#123; type: Number &#125; &#125; 在header.vue中，使用组件，并传参数 父组件header.vue的全部代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306&lt;template&gt; &lt;div class=&quot;header&quot;&gt; &lt;div class=&quot;content-wrapper&quot;&gt; &lt;div class=&quot;avatar&quot;&gt; &lt;img width=&quot;64&quot; height=&quot;64&quot; :src=&quot;seller.avatar&quot;&gt; &lt;/div&gt; &lt;div class=&quot;content&quot;&gt; &lt;div class=&quot;title&quot;&gt; &lt;span class=&quot;brand&quot;&gt;&lt;/span&gt; &lt;span class=&quot;name&quot;&gt;&#123;&#123;seller.name&#125;&#125;&lt;/span&gt; &lt;/div&gt; &lt;div class=&quot;description&quot;&gt; &#123;&#123;seller.description&#125;&#125;/&#123;&#123;seller.deliveryTime&#125;&#125;分钟送达 &lt;/div&gt; &lt;div v-if=&quot;seller.supports&quot; class=&quot;support&quot;&gt; &lt;span class=&quot;icon&quot; :class=&quot;classMap[seller.supports[0].type]&quot;&gt;&lt;/span&gt; &lt;span class=&quot;text&quot;&gt;&#123;&#123;seller.supports[0].description&#125;&#125;&lt;/span&gt; &lt;/div&gt; &lt;/div&gt; &lt;div v-if=&quot;seller.supports&quot; class=&quot;support-count&quot; @click=&quot;showDetail&quot;&gt; &lt;span class=&quot;count&quot;&gt;&#123;&#123;seller.supports.length&#125;&#125;个&lt;/span&gt; &lt;i class=&quot;icon-keyboard_arrow_right&quot;&gt;&lt;/i&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;bulletin-wrapper&quot; @click=&quot;showDetail&quot;&gt; &lt;span class=&quot;bulletin-title&quot;&gt;&lt;/span&gt;&lt;span class=&quot;bulletin-text&quot;&gt;&#123;&#123;seller.bulletin&#125;&#125;&lt;/span&gt; &lt;i class=&quot;icon-keyboard_arrow_right&quot;&gt;&lt;/i&gt; &lt;/div&gt; &lt;div class=&quot;background&quot;&gt; &lt;img :src=&quot;seller.avatar&quot; width=&quot;100%&quot; height=&quot;100%&quot;&gt; &lt;/div&gt; &lt;transition name=&quot;fade&quot;&gt; &lt;div v-show=&quot;detailShow&quot; class=&quot;detail&quot;&gt; &lt;div class=&quot;detail-wrapper clearfix&quot;&gt; &lt;div class=&quot;detail-main&quot;&gt; &lt;h1 class=&quot;name&quot;&gt;&#123;&#123;seller.name&#125;&#125;&lt;/h1&gt; &lt;div class=&quot;star-wrapper&quot;&gt; &lt;star :size=&quot;48&quot; :score=&quot;seller.score&quot;&gt;&lt;/star&gt; &lt;/div&gt; &lt;div class=&quot;title&quot;&gt; &lt;div class=&quot;line&quot;&gt;&lt;/div&gt; &lt;div class=&quot;text&quot;&gt;优惠信息&lt;/div&gt; &lt;div class=&quot;line&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;ul v-if=&quot;seller.supports&quot; class=&quot;supports&quot;&gt; &lt;li class=&quot;support-item&quot; v-for=&quot;(item,index) in seller.supports&quot;&gt; &lt;span class=&quot;icon&quot; :class=&quot;classMap[seller.supports[index].type]&quot;&gt;&lt;/span&gt; &lt;span class=&quot;text&quot;&gt;&#123;&#123;seller.supports[index].description&#125;&#125;&lt;/span&gt; &lt;/li&gt; &lt;/ul&gt; &lt;div class=&quot;title&quot;&gt; &lt;div class=&quot;line&quot;&gt;&lt;/div&gt; &lt;div class=&quot;text&quot;&gt;商家公告&lt;/div&gt; &lt;div class=&quot;line&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;bulletin&quot;&gt; &lt;p class=&quot;content&quot;&gt;&#123;&#123;seller.bulletin&#125;&#125;&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;detail-close&quot; @click=&quot;hideDetail&quot;&gt; &lt;i class=&quot;icon-close&quot;&gt;&lt;/i&gt; &lt;/div&gt; &lt;/div&gt; &lt;/transition&gt; &lt;/div&gt;&lt;/template&gt;&lt;script type=&quot;text/ecmascript-6&quot;&gt; import star from &apos;components/star/star&apos;; export default &#123; props: &#123; seller: &#123; type: Object &#125; &#125;, data() &#123; return &#123; detailShow: false &#125;; &#125;, methods: &#123; showDetail() &#123; this.detailShow = true; &#125;, hideDetail() &#123; this.detailShow = false; &#125; &#125;, created() &#123; this.classMap = [&apos;decrease&apos;, &apos;discount&apos;, &apos;special&apos;, &apos;invoice&apos;, &apos;guarantee&apos;]; &#125;, components: &#123; star &#125; &#125;;&lt;/script&gt;&lt;style lang=&quot;stylus&quot; rel=&quot;stylesheet/stylus&quot;&gt; @import &quot;../../common/stylus/mixin&quot;; .header position: relative overflow: hidden color: #fff background: rgba(7, 17, 27, 0.5) .content-wrapper position: relative padding: 24px 12px 18px 24px font-size: 0 .avatar display: inline-block vertical-align: top img border-radius: 2px .content display: inline-block margin-left: 16px .title margin: 2px 0 8px 0 .brand display: inline-block vertical-align: top width: 30px height: 18px bg-image(&apos;brand&apos;) background-size: 30px 18px background-repeat: no-repeat .name margin-left: 6px font-size: 16px line-height: 18px font-weight: bold .description margin-bottom: 10px line-height: 12px font-size: 12px .support .icon display: inline-block vertical-align: top width: 12px height: 12px margin-right: 4px background-size: 12px 12px background-repeat: no-repeat &amp;.decrease bg-image(&apos;decrease_1&apos;) &amp;.discount bg-image(&apos;discount_1&apos;) &amp;.guarantee bg-image(&apos;guarantee_1&apos;) &amp;.invoice bg-image(&apos;invoice_1&apos;) &amp;.special bg-image(&apos;special_1&apos;) .text line-height: 12px font-size: 10px .support-count position: absolute right: 12px bottom: 14px padding: 0 8px height: 24px line-height: 24px border-radius: 14px background: rgba(0, 0, 0, 0.2) text-align: center .count vertical-align: top font-size: 10px .icon-keyboard_arrow_right margin-left: 2px line-height: 24px font-size: 10px .bulletin-wrapper position: relative height: 28px line-height: 28px padding: 0 22px 0 12px white-space: nowrap overflow: hidden text-overflow: ellipsis background: rgba(7, 17, 27, 0.2) .bulletin-title display: inline-block vertical-align: top margin-top: 8px width: 22px height: 12px bg-image(&apos;bulletin&apos;) background-size: 22px 12px background-repeat: no-repeat .bulletin-text vertical-align: top margin: 0 4px font-size: 10px .icon-keyboard_arrow_right position: absolute font-size: 10px right: 12px top: 8px .background position: absolute top: 0 left: 0 width: 100% height: 100% z-index: -1 filter: blur(10px) .detail position: fixed z-index: 100 top: 0 left: 0 width: 100% height: 100% overflow: auto backdrop-filter: blur(10px) opacity: 1 background: rgba(7, 17, 27, 0.8) &amp;.fade-enter-active, &amp;.fade-leave-active transition: all 0.5s &amp;.fade-enter, &amp;.fade-leave-active opacity: 0 background: rgba(7, 17, 27, 0) .detail-wrapper width: 100% min-height: 100% .detail-main margin-top: 64px padding-bottom: 64px .name line-height: 16px text-align: center font-size: 16px font-weight: 700 .star-wrapper margin-top: 18px padding: 2px 0 text-align: center .title display: flex width: 80% margin: 28px auto 24px auto .line flex: 1 position: relative top: -6px border-bottom: 1px solid rgba(255, 255, 255, 0.2) .text padding: 0 12px font-weight: 700 font-size: 14px .supports width: 80% margin: 0 auto .support-item padding: 0 12px margin-bottom: 12px font-size: 0 &amp;:last-child margin-bottom: 0 .icon display: inline-block width: 16px height: 16px vertical-align: top margin-right: 6px background-size: 16px 16px background-repeat: no-repeat &amp;.decrease bg-image(&apos;decrease_2&apos;) &amp;.discount bg-image(&apos;discount_2&apos;) &amp;.guarantee bg-image(&apos;guarantee_2&apos;) &amp;.invoice bg-image(&apos;invoice_2&apos;) &amp;.special bg-image(&apos;special_2&apos;) .text line-height: 16px font-size: 12px .bulletin width: 80% margin: 0 auto .content padding: 0 12px line-height: 24px font-size: 12px .detail-close position: relative width: 32px height: 32px margin: -64px auto 0 auto clear: both font-size: 32px&lt;/style&gt; 关键点： 引入组件 1import star from &apos;components/star/star&apos;; 注册组件 123components: &#123; star &#125; html中使用组件 1&lt;star :size=&quot;48&quot; :score=&quot;seller.score&quot;&gt;&lt;/star&gt;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[关于vue的实战笔记]]></title>
      <url>%2F2017%2F08%2F26%2F%E5%85%B3%E4%BA%8Evue%E7%9A%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
      <content type="text"><![CDATA[1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798991001011021031041051061071081091101111121131141151161171181191201211221231241251261271281291301311321331341351361371381391401411421431441451461471481491501511521531541551561571581591601611621631641651661671681691701711721731741751761771781791801811821831841851861871881891901911921931941951961971981992002012022032042052062072082092102112122132142152162172182192202212222232242252262272282292302312322332342352362372382392402412422432442452462472482492502512522532542552562572582592602612622632642652662672682692702712722732742752762772782792802812822832842852862872882892902912922932942952962972982993003013023033043053063073083093103113123133143153163173183193203213223233243253263273283293303313323333343353363373383393403413423433443453463473483493503513523533543553563573583593603613623633643653663673683693703713723733743753763773783793803813823833843853863873883893903913923933943953963973983994004014024034044054064074084094104114124134144154164174184194204214224234244254264274284294304314324334344354364374384394404411.查看vue模板列表vue list2.利用脚手架安装基于webpack模板的vue项目基础代码vue init webpack sell3.安装依赖 cd sellnpm intall 就是多了一个node_modules文件夹npm run dev4.代码规则http://eslint.org/docs/rules/indenthttps://github.com/standard/standard/blob/master/RULES.md#javascript-standard-style5.vue组件&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;body&gt; &lt;div id=&quot;app&quot;&gt; &lt;!-- 3. #app是Vue实例挂载的元素，应该在挂载元素范围内使用组件--&gt; &lt;my-component&gt;&lt;/my-component&gt; &lt;/div&gt; &lt;/body&gt; &lt;script src=&quot;https://unpkg.com/vue&quot;&gt;&lt;/script&gt; &lt;script&gt; // 1.创建一个组件构造器 var myComponent = Vue.extend(&#123; template: &apos;&lt;div&gt;This is my first component!&lt;/div&gt;&apos; &#125;) // 2.注册组件，并指定组件的标签，组件的HTML标签为&lt;my-component&gt; Vue.component(&apos;my-component&apos;, myComponent) new Vue(&#123; el: &apos;#app&apos; &#125;); &lt;/script&gt;&lt;/html&gt;6.将svg文件转为图标字体https://icomoon.io/7.stylus语法没有花括号和分号8.mock数据模拟后台数据1）创建data.json（json数据）2）在bulid文件夹下的dev-server.js 编写接口请求http://localhost:8080/api/seller9.jsonview谷歌浏览器插件，json代码有缩进10.vue-router node.js基础一（慕课网 ）vue组件 express mock.js第5章 项目实战-页面骨架开发(更多视频教程关注微信公众号【菜鸟要飞】) 11.vue-routerhttps://router.vuejs.org/zh-cn/12.打开stylus、json、ES6语法高亮查看&gt;语法 View &gt; Syntax &gt; Open all with current extension as... &gt;stylus View &gt; Syntax &gt; Open all with current extension as... &gt;javascript&gt;json View &gt; Syntax &gt; Open all with current extension as... &gt;javascript&gt;javascript//SublimeLinter 对代码进行语法检查//npm install -g eslint babel-eslint13.基本模板D:\Sublime Text 3 优化版\Data\Packages\User\SublimeTmpl\templatesD:\Sublime Text 3 优化版\Data\Packages\SublimeTmpl\templatesctrl+alt+h → htmlctrl+alt+j → javascriptctrl+alt+c → cssctrl+alt+p → phpctrl+alt+r → rubyctrl+alt+shift+p → python如果想要新建其他类型的文件模板的话，先自定义文件模板方在templates文件夹里，再分别打开Default (Windows).sublime-keymap、Default.sublime-commands、Main.sublime-menu、SublimeTmpl.sublime-settings这四个文件照着里面的格式自定义想要新建的类型14.安装stylus-loader1)在package.json中加入 &quot;stylus-loader&quot;: &quot;^2.1.1&quot;,2）再执行npm install14.weestorm快捷鍵ctrl+Y 删除一行ctrl+D 复制当前行ctrl+W 选中单词ctrl+alt+shif+L 格式化代码shift+enter 重新开始一行（无论光标在哪个位置）15.出現以下错误Module build failed: Error: Cannot find module &apos;stylus&apos;at Function.Module._resolveFilename (module.js:470:15)at Function.Module._load (module.js:418:25)at Module.require (module.js:498:17)at require (internal/module.js:20:19)at Object. (D:\Vue\sell\node_modules.2.5.0@stylus-loader\index.js:2:14)at Module._compile (module.js:571:32)at Object.Module._extensions..js (module.js:580:10)at Module.load (module.js:488:32)at tryModuleLoad (module.js:447:12)at Function.Module._load (module.js:439:3)at Module.require (module.js:498:17)at require (internal/module.js:20:19)at loadLoader (D:\Vue\sell\node_modules.2.3.0@loader-runner\lib\loadLoader.js:13:17)at iteratePitchingLoaders (D:\Vue\sell\node_modules.2.3.0@loader-runner\lib\LoaderRunner.js:169:2)at iteratePitchingLoaders (D:\Vue\sell\node_modules.2.3.0@loader-runner\lib\LoaderRunner.js:165:10)at D:\Vue\sell\node_modules.2.3.0@loader-runner\lib\LoaderRunner.js:173:18@ ./~/.2.0.3@vue-style-loader!./~/.0.26.2@css-loader?&#123;&quot;minimize&quot;:false,&quot;sourceMap&quot;:false&#125;!./~/.11.1.3@vue-loader/lib/style-rewriter.js?&#123;&quot;id&quot;:&quot;data-v-6bc965e0&quot;,&quot;scoped&quot;:false,&quot;hasInlineConfig&quot;:false&#125;!./~/.2.5.0@stylus-loader?&#123;&quot;sourceMap&quot;:false&#125;!./~/.11.1.3@vue-loader/lib/selector.js?type=styles&amp;index=0!./src/components/header/header.vue 4:14-416 13:3-17:5 14:22-424@ ./src/components/header/header.vue@ ./~/.6.3.2@babel-loader/lib!./~/.11.1.3@vue-loader/lib/selector.js?type=script&amp;index=0!./src/App.vue@ ./src/App.vue@ ./src/main.js@ multi ./build/dev-client ./src/main.js原因：是因为需要安装stylus 再安装stylus-loadernpm install stylus --save-devnpm install stylus-loader --save-dev16.组件名不可以和标签名同名17.markflex布局-弹性布局http://www.ruanyifeng.com/blog/2015/07/flex-examples.htmlhttp://www.ruanyifeng.com/blog/2015/07/flex-grammar.htmlhttps://css-tricks.com/snippets/css/a-guide-to-flexbox/#app .tab display: flex width: 100% height: 40px line-height: 40px .tab-item flex: 1 text-align:center18.所有移动端的psd设计都是按实际两倍的设计的所以实际的高度为设计稿的一半19.css兼容问题 markvue-loader依赖postcss插件搞定css兼容20.vue-router 2对于单页应用，官方提供了vue-router进行路由跳转的处理https://router.vuejs.org/zh-cn/https://gongph.gitbooks.io/vue-router-2/content/api/options.html1)安装 --save 会被配置到dependencies 生产npm install vue-router --save严格来说，应该到github上找最新的稳定版本安装https://github.com/vuejs/vue-router/blob/dev/package.json- 查看观官方package.json &quot;version&quot;: &quot;2.7.0&quot;, &quot;description&quot;: &quot;Official router for Vue.js 2&quot;,修改项目里面的package.json&quot;dependencies&quot;: &#123; &quot;vue-router&quot;: &quot;^2.6.0&quot; &#125;- 执行 npm install2）默认跳转路由路径&#123;path: &apos;*&apos;, redirect: &apos;goods&apos;&#125;21.如何打包上线npm run build22.// 跳过ESlint规则校验 因为在js中，使用new一个变量，是需要/* eslint-disable no-new */23.设置别名 components ./componentsbuild 文件夹下webpack.base.conf.jsresolve: &#123; extensions: [&apos;.js&apos;, &apos;.vue&apos;, &apos;.json&apos;], alias: &#123; &apos;vue$&apos;: &apos;vue/dist/vue.esm.js&apos;, &apos;@&apos;: resolve(&apos;src&apos;), &apos;components&apos;:&apos;./components&apos; &#125; &#125;24.移动端一像素边框 可能在移动端上就是两像素 dbr设备像素比devicePixelRatio简单介绍 http://www.zhangxinxu.com/wordpress/2012/08/window-devicepixelratio/mixin.styl css预处理器提供的一个方法可以定义函数25.使用手机查看页面1）查看当前物理地址 ipconfig 192.168.130.12）草料二维码 http://cli.im/http://192.168.130.1:8080/保证你的手机和电脑在同一个局域网或者使用webstorm自带的26.vue-resourcehttps://github.com/pagekit/vue-resource/blob/develop/README.mdhttps://github.com/pagekit/vue-resource/blob/develop/docs/http.mdvue-resource Vue.js的插件提供了使用XMLHttpRequest或JSONP 进行Web请求和处理响应的服务。27.ESlint的修改在.eslintrc.js28.vue-resource插件使用1）main.jsimport VueResource from &apos;vue-resource&apos;;Vue.use(VueResource);29.mongodb30.todomvchttps://github.com/tastejs/todomvc-app-templatehttp://todomvc.com/examples/vue/npm install vue --save-dev31.header.vuev-if=&quot;seller.supports&quot;异步加载数据，解决一开始为空报错32.消除空白字符--- 元素之间有间距设置父级font-size:033.图片 2dbr 3dbr1)mixin.stylbg-image($url) background-image:url($url+&quot;@2x.png&quot;) @media(-webkit-device-pixel-ratio: 3),(min-device-aspect-ratio: 3) background-image:url($url+&quot;@3x.png&quot;)2)34.inline-block会有默认的间距去除inline-block元素间间距的N种方法http://www.zhangxinxu.com/wordpress/2012/04/inline-block-space-remove-%E5%8E%BB%E9%99%A4%E9%97%B4%E8%B7%9D/35.Css Sticky footer布局&lt;div class=&quot;detail&quot; v-show=&quot;detailShow&quot;&gt; &lt;div class=&quot;detail-wrapper clearfix&quot;&gt; &lt;div class=&quot;detail-main&quot;&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;detail-close&quot;&gt; &lt;i class=&quot;icon-close&quot;&gt;&lt;/i&gt; &lt;/div&gt;&lt;/div&gt; .detail position:fixed z-index:100 top:0 left:0 width:100% height:100% overflow:auto background-color:rgba(7,17,27,0.8) .detail-wrapper min-height:100% .detail-main margin-top:64px padding-bottom:64px .detail-close position:relative width:32px height:32px margin:-64px auto 0 auto clear:both font-size:32px关键点 .detail-main padding-bottom:64px .detail-close margin:-64px auto 0 auto36.当 Vue.js 用 v-for 正在更新已渲染过的元素列表时，它默认用 “就地复用” 策略。如果数据项的顺序被改变，Vue将不是移动 DOM 元素来匹配数据项的顺序， 而是简单复用此处每个元素，并且确保它在特定索引下显示已被渲染过的每个元素。这个类似 Vue 1.x 的 track-by=&quot;$index&quot; 。这个默认的模式是有效的，但是只适用于不依赖子组件状态或临时 DOM 状态（例如：表单输入值）的列表渲染输出。为了给 Vue 一个提示，以便它能跟踪每个节点的身份，从而重用和重新排序现有元素，你需要为每项提供一个唯一 key 属性。理想的 key 值是每项都有唯一 id。这个特殊的属性相当于 Vue 1.x 的 track-by ，但它的工作方式类似于一个属性，所以你需要用 v-bind 来绑定动态值（在这里使用简写）：&lt;div v-for=&quot;item in items&quot; :key=&quot;item.id&quot;&gt; &lt;!-- 内容 --&gt;&lt;/div&gt;建议尽可能使用 v-for 来提供 key ，除非迭代 DOM 内容足够简单，或者你是故意要依赖于默认行为来获得性能提升。因为它是 Vue 识别节点的一个通用机制， key 并不特别与 v-for 关联，key 还具有其他用途，我们将在后面的指南中看到其他用途。37.vue transition1) &lt;transition name=&quot;detail&quot;&gt; &lt;div class=&quot;detail&quot; v-show=&quot;detailShow&quot; transition=&quot;fade&quot;&gt; &lt;/div&gt; &lt;/transition&gt; 2).detail position:fixed z-index:100 top:0 left:0 width:100% height:100% overflow:auto transition:all 0.5s opacity:1 background-color:rgba(7,17,27,0.8) &amp;.detail-enter,&amp;.detail-leave-active opacity:0 background-color:rgba(7,17,27,0)https://godbasin.github.io/2016/12/03/vue2-notes-5-transition-animation/https://cn.vuejs.org/v2/guide/transitions.html#同时使用-Transitions-和-Animations38.弹出层模糊效果 -- 只能在ios系统下实现backdrop-filter:blur(10px)39.垂直居中display:table40.webpack自动生成一串哈希值---去缓存vue-router2.0 vue-resource 2.0 作者已经不更新了 推荐使用 =&gt; axiostransition 2.041.页面滚动https://github.com/ustbhuangyi/better-scroll1)在package.json中，添加&quot;dependencies&quot;: &#123; &quot;better-scroll&quot;:&quot;^0.4.0&quot;&#125;2)npm install42. 异步更新数据DOM better-scroll https://012-cn.vuejs.org/guide/best-practices.html#理解异步更新-1）实现滚动import BScroll from &apos;better-scroll&apos;new BScroll(document.getElementById(&apos;wrapper&apos;)); this.$nextTick(() =&gt; &#123; this._initScroll(); &#125;); -2） 43. // 在vue中，可以直接赋值不存在的对象，但是无法观察到变化解决这个问题 1) 在组件中，引入vue import Vue from &apos;vue&apos;; 2) 通过以下方法，增加vue变量 Vue.set(this.food,&apos;count&apos;,1);]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[node.js]]></title>
      <url>%2F2017%2F07%2F18%2Fnodejs%E7%AC%94%E8%AE%B0%2F</url>
      <content type="text"><![CDATA[什么是node？ 采用Google Chrome浏览器，V8引擎，由C++语言编写的，本质上是一个javascript运行环境。 node.js运行环境不仅仅可以解析js，并且没有浏览器安全级得到限制。 还提供许多系统级别的API。 如文件的读写、进程的管理、网络通信等等。 为什么要学习node.js? 很火，2009面世以来，nodejs快速的风靡全球。 很多框架基于node.js ,例如 Node-Webkit appjs musicquiz Jade Gist Yamr Grunt Express.js gulp Nodecat Logg.io Hyro PDFKit haroopad NoduinoWeb Filsh Forever NodeOS Imdex 等等 相关学习链接nodejs社区全球技术交流平台 什么是稳定版本，什么是非稳定版本 偶数位稳定版本（如 0.6.x 0.8.x） ，奇数位非稳定版本（如 0.7.x 0.9.x，可能有不稳定的新特性） node.js启动web服务器node.js官网 在项目文件夹下，新建server.js 1234567891011121314const http = require(&apos;http&apos;);const hostname = &apos;127.0.0.1&apos;;const port = 3000;const server = http.createServer((req, res) =&gt; &#123; res.statusCode = 200; res.setHeader(&apos;Content-Type&apos;, &apos;text/plain&apos;); res.end(&apos;Hello World\n&apos;);&#125;);server.listen(port, hostname, () =&gt; &#123; console.log(`Server running at http://$&#123;hostname&#125;:$&#123;port&#125;/`);&#125;); 启动web服务器 1node server.js 根据体会访问对应端口，如 1Server running at http://127.0.0.1:3000/ 则在浏览器访问 http://127.0.0.1:3000/ commonjs 规范 不同于jQuery,Commonjs是一套规范 定义、标识、应用 node.js模块node.js模块组成 核心模块 文件模块 var util=require(‘./util.j’) 第三方模块 通过npm安装的模块流程node里面没有全局命名空间的概念，不用担心变量污染，含糊被覆盖的问题 创建模块 导出模块 加载模块 使用模块]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[ECMAScript 6 - ES2015]]></title>
      <url>%2F2017%2F07%2F13%2FES2015%2F</url>
      <content type="text"><![CDATA[ECMAScript 6 - ES2015 笔记ES6和Javascript Jscript actionscript的关系。 ES6（是Javascript Jscript actionscript的规范） Javascript Jscript（微软自己开发，只在在IE浏览器生效。） actionscript（只在flash环境有效）是对ES6的实现。 ES6是使得 JavaScript 语言可以用来编写复杂的大型应用程序，成为企业级开发语言。 var和let的区别 var申明的变量在代码块外面能被识别，但是let命令却不能被识别，这样就实现了js的块级作用域，我们在使用条件语句 循环语句等就会不担心变量污染的问题了 用let重定义变量会抛出一个语法错误 let是一个严格模式下的保留词。在非严格模式下，出于向后兼容的目的，你仍可以用let 命名来声明变量、函数和参数 确实可以编写var let=’q’;这样的代码！不过let let;无论如何都是非法的。 let命令不存在变量提升 let声明的全局变量不是全局对象的属性。这就意味着，你不可以通过window.变量名的方式访问这些变量。它们只存在于一个不可见的块的作用域中，这个块理论上是Web页面中运行的所有JS代码的外层块。 什么是变量（函数）提升-在ES6之前，JavaScript没有块级作用域(一对花括号{}即为一个块级作用域)，只有全局作用域和函数作用域。变量提升即将变量（函数）声明提升到它所在作用域的最开始的部分,并不会把赋值也提升上来。 const const与let类似，它们的不同之处在于，const声明的变量只可以在声明时赋值，不可随意修改，否则会导致SyntaxError（语法错误）。 际上保证的，并不是变量的值不得改动，而是变量指向的那个内存地址不得改动。对于简单类型的数据（数值、字符串、布尔值），值就保存在变量指向的那个内存地址，因此等同于常量。但对于复合类型的数据（主要是对象和数组），变量指向的内存地址，保存的只是一个指针，const只能保证这个指针是固定的，至于它指向的数据结构是不是可变的，就完全不能控制了。12345const foo = &#123;&#125;;// 为 foo 添加一个属性，可以成功foo.prop = 123;foo.prop // 123console.log(foo);foo = &#123;&#125;; // 将 foo 指向另一个对象，就会报错// Uncaught TypeError: Assignment to constant variable. 模板字符串(会保留换行) 实例一 12345678let title=&quot;模板字符串&quot;;let tpl=` &lt;div&gt; &lt;span&gt;$&#123;title+` &lt;span&gt;$&#123;1234&#125; 2016&lt;/span&gt; `&#125;&lt;/span&gt; &lt;/div&gt;`; 实例二 1234567891011121314151617181920212223242526272829303132333435363738console.log(tpl);模板编译 //mark 在模板字符串中使用js var template = `&lt;ul&gt; &lt;% for(var i=0; i &lt; data.supplies.length; i++) &#123; %&gt; &lt;li&gt;&lt;%= data.supplies[i] %&gt;&lt;/li&gt; &lt;% &#125; %&gt;&lt;/ul&gt;`;function compile(template)&#123; var evalExpr = /&lt;%=(.+?)%&gt;/g; var expr = /&lt;%([\s\S]+?)%&gt;/g; template = template .replace(evalExpr, &apos;`); \n echo( $1 ); \n echo(`&apos;) .replace(expr, &apos;`); \n $1 \n echo(`&apos;); template = &apos;echo(`&apos; + template + &apos;`);&apos;; var script = `(function parse(data)&#123; var output = &quot;&quot;; function echo(html)&#123; output += html; &#125; $&#123; template &#125; return output; &#125;)`; return script;&#125;var parse = eval(compile(template));console.log(parse);console.log( parse(&#123; supplies: [ &quot;broom&quot;, &quot;mop&quot;, &quot;cleaner&quot; ] &#125;)); 生成器函数通常和 yield 关键字同时使用。 函数执行到每个 yield 时都会中断并返回 yield 的右值（通过 next 方法返回对象中的 value 字段）。下次调用 next，函数会从 yield 的下一个语句继续执行。等到整个函数执行完，next 方法返回的 done 字段会变成 true。//mark123456789function* fibs() &#123; let a = 0; let b = 1; while (true) &#123; yield a; [a, b] = [b, a + b]; &#125;&#125;let [first, second, third, fourth, fifth, sixth] = fibs(); 结果1234567a b 返回值0 1 01 1 11 2 12 3 23 5 35 8 5 顶层对象属性 顶层对象，在浏览器环境指的是window对象，在Node指的是global对象。ES5之中，顶层对象的属性与全局变量是等价的。 注意：let命令、const命令、class命令声明的全局变量，不属于顶层对象的属性。1234window.a // 1let b = 1;window.b // undefined map() 方法 创建一个新数组，其结果是该数组中的每个元素都调用一个提供的函数后返回的结果。12345678910const numbers = [1, 2, 3, 4, 5];let arr = numbers.map((currentValue, index, array) =&gt; &#123; console.log(`currentValue = `, currentValue); console.log(`index = `, index); console.log(`array= `, array); return currentValue * 2;&#125;, numbers);console.log(`arr `, arr); Symbol 作为对象的属相名称 防止被重写12345678910111213//file1.jslet name=Symbol();&#123; var person=&#123;&#125;; person[name]=&apos;file1&apos;;&#125;//file2.js&#123; person[&apos;name&apos;]=&apos;file2&apos;;&#125;console.log(person); 123456789101112131415161718let name=Symbol();&#123; var person=&#123;&#125;; person[name]=&apos;file1&apos;; console.log(&apos;person[name]:&apos;+person[name]);&#125;console.log(&apos;person[name]:&apos;+person[name]);//file2.js&#123; let name=Symbol(); person[name]=&apos;file2&apos;; console.log(&apos;person[name]:&apos;+person[name]);&#125; console.log(&apos;person[name]:&apos;+person[name]); classES5定义类1234567891011121314151617181920212223242526272829303132333435363738394041424344function User(name)&#123; this.name=name;&#125;// 静态方法User.getClassName=function()&#123; return &apos;User&apos;;&#125;;User.prototype.changeName=function(name)&#123; this.name=name;&#125;;// Object.defineProperties 以很方便地一次向类添加多个方法。 /classMark/Object.defineProperty(User.prototype,&apos;info&apos;,&#123; get()&#123; return &apos;name:&apos;+this.name; &#125;&#125;);//子类function Manager(name,password)&#123; User.call(this,name); this.password=password;&#125;//继承静态方法 形成它自身的构造函数原型 _proto_对象的内置属性Manager._proto_=User;// 继承 prototype原型方法 函数内置属性Manager.prototype=User.prototype;//添加新方法Manager.prototype.changePassword=function(pwd)&#123; this.password=pwd;&#125;var user=new User(&apos;leo&apos;);var manager=new Manager(&apos;leo&apos;,&apos;123456&apos;);manager.changeName(&apos;mingming&apos;);console.log(manager.info); ES6定义类 -语法糖 语法糖（Syntactic sugar），也译为糖衣语法，是由英国计算机科学家彼得·蘭丁发明的一个术语，指计算机语言中添加的某种语法，这种语法对语言的功能并没有影响，但是更方便程序员使用。 注意 ： class不会被提升123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114class User &#123; constructor(name) &#123; this.name = name; &#125; // 静态方法--- 不会被实例继承 static getClassName() &#123; return &apos;User&apos;; &#125; //普通的原型方法 changeName(name) &#123; this.name = name; &#125; get info() &#123; return &apos;name:&apos; + this.name; &#125;&#125;// 由于类的方法都定义在prototype对象上面，所以类的新方法可以添加在prototype对象上面。Object.assign方法可以很方便地一次向类添加多个方法。// MarkObject.assign(User.prototype, &#123; toString() &#123;&#125;, toValue() &#123;&#125; &#125;) // 子类 继承静态方法 继承 prototype原型方法class Manager extends User &#123; constructor(name, password) &#123; // super的用法 super(name); this.password = password; &#125; changePassword(pwd) &#123; this.password = pwd; &#125; static getClassName() &#123; return &apos;Manager&apos;; &#125; get managerInfo() &#123; // super的用法 return super.info; &#125; set managerInfo(value) &#123; console.log(&quot;set managerInfo:&quot; + value); &#125;&#125;var user = new User(&apos;leo&apos;);var user2 = new User(&apos;huihui&apos;);// Manager.changePassword(&quot;857154&quot;); //只有静态方法才可以直接通过类名调用console.log(Manager.getClassName()); //静态方法只能通过类名调用// manager.getClassName();var manager = new Manager(&apos;leo&apos;, &apos;123456&apos;);console.log(typeof User, typeof Manager);manager.changeName(&apos;mingming&apos;);console.log(manager.info);console.log(manager.managerInfo); //getconsole.log(manager.managerInfo = 8); //setconsole.log(&quot;hasOwnProperty&quot;);console.log(manager.hasOwnProperty(&apos;password&apos;)); // trueconsole.log(manager.hasOwnProperty(&apos;age&apos;)); // falseconsole.log(manager.__proto__.hasOwnProperty(&apos;password&apos;)); // falseconsole.log(manager.__proto__.hasOwnProperty(&apos;changePassword&apos;)); // trueconsole.log(manager.__proto__.hasOwnProperty(&apos;changeName&apos;)); // falseconsole.log(manager.hasOwnProperty(&apos;toString&apos;)); // falseconsole.log(user.hasOwnProperty(&apos;toString&apos;)); // falseconsole.log(user.__proto__.hasOwnProperty(&apos;toString&apos;)); // trueconsole.log(user.hasOwnProperty(&apos;name&apos;)); // true// 类的所有实例共享一个原型对象console.log(user2.__proto__ === user.__proto__); // trueconsole.log(manager.__proto__ === user.__proto__); // falseuser2.__proto__.printName = function() &#123; return &apos;huihui&apos;&#125;;console.log(user.printName()); // &quot;huihui&quot;console.log(user2.printName()); // &quot;huihui&quot;var user3 = new User(&apos;Tom&apos;);console.log(user3.printName()); // &quot;huihui&quot;// 默认classclass I extends User &#123; //自动加入默认constructor constructor(...arg) &#123; super(...arg); &#125;&#125;var me = new I(&apos;zhongbo&apos;);// 创建立即执行的类let person = new class Person &#123; constructor(name) &#123; this.name = name; &#125;&#125;(&apos;mingm&apos;);console.log(person);let methodName = &apos;getArea&apos;;class Square &#123; constructor(length) &#123; &#125; [methodName]() &#123; &#125;&#125;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[闭包]]></title>
      <url>%2F2017%2F07%2F13%2F%E9%97%AD%E5%8C%85%2F</url>
      <content type="text"><![CDATA[什么叫闭包？​ 在计算机科学中，闭包（英语：Closure），又稱词法闭包（Lexical Closure）或函數閉包（function closures），是引用了自由变量的函数。这个被引用的自由变量将和这个函数一同存在，即使已经离开了创造它的环境也不例外。所以，有另一种说法认为闭包是由函数和与其相关的引用环境组合而成的实体。 闭包 在下面代码中，函数易用的是全局变量 i，形成了闭包 123456789// 闭包 var会提升变量var a=[];for(var i=0;i&lt;10;i++)&#123; a[i]=function()&#123; console.log(i); &#125;;&#125;a[9]();//10console.log(a); 在浏览器中可以看到i是全局变量 消除闭包 let let声明有局部块级作用域变量的作用。 每一个a[]绑定的时候，都生成了一个新的块级作用域 然后每一个i都不一样 1234567891011var b = [];for (let i = 0; i &lt; 10; i++) &#123; b[i] = function() &#123; console.log(i); &#125;;&#125;console.log(a[2]);b[2](); //2b[9](); //9console.log(b); 疑点1234567891011for (var j = 0; j &lt; 10; j++) &#123; setTimeout(function(j) &#123; console.log(j); &#125;(j), 1000)&#125;for (var f = 0; f &lt; 10; f++) &#123; setTimeout(function() &#123; console.log(f); &#125;(), 1000)&#125;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[用bootstrap搭建vivo官网笔记]]></title>
      <url>%2F2017%2F07%2F10%2F%E7%94%A8bootstrap%E6%90%AD%E5%BB%BAvivo%E5%AE%98%E7%BD%91%E7%AC%94%E8%AE%B0%2F</url>
      <content type="text"><![CDATA[vivo官网 最终的项目页面 https://github.com/mingmLiang/vivo transition12345678910111213transition: *property* *duration* *timing-function* *delay*;transition-property 规定设置过渡效果的 CSS 属性的名称。transition-duration 规定完成过渡效果需要多少秒或毫秒。transition-timing-function 规定速度效果的速度曲线。transition-delay 定义过渡效果何时开始。-webkit-transition: color .3scubic-bezier(.73, .03, .31, 1)-moz-transition: color .3scubic-bezier(.73, .03, .31, 1);transition: color .3s cubic-bezier(.73,.03, .31, 1); 贝塞尔曲线 cubic-bezier http://www.cnblogs.com/hsprout/p/5221955.html transformhttp://www.w3school.com.cn/cssref/pr_transform.asp12345678transform:rotate(7deg);-ms-transform:rotate(7deg); /* IE 9 */-moz-transform:rotate(7deg); /* Firefox */-webkit-transform:rotate(7deg); /* Safari 和 Chrome */transform: matrix(1, 0, 0, 1, -57, 100); 理解CSS3 transform中的Matrix(矩阵)123456789101112131415161718192021222324-o-transform:rotate(7deg); /* Opera */none 定义不进行转换。 matrix(n,n,n,n,n,n) 定义 2D 转换，使用六个值的矩阵。 matrix3d(n,n,n,n,n,n,n,n,n,n,n,n,n,n,n,n) 定义 3D 转换，使用 16 个值的 4x4 矩阵。translate(x,y) 定义 2D 转换。 translate3d(x,y,z) 定义 3D 转换。 translateX(x) 定义转换，只是用 X 轴的值。 translateY(y) 定义转换，只是用 Y 轴的值。 translateZ(z) 定义 3D 转换，只是用 Z 轴的值。 scale(x,y) 定义 2D 缩放转换。 scale3d(x,y,z) 定义 3D 缩放转换。 scaleX(x) 通过设置 X 轴的值来定义缩放转换。 scaleY(y) 通过设置 Y 轴的值来定义缩放转换。 scaleZ(z) 通过设置 Z 轴的值来定义 3D 缩放转换。 rotate(angle) 定义 2D 旋转，在参数中规定角度。 rotate3d(x,y,z,angle) 定义 3D 旋转。 rotateX(angle) 定义沿着 X 轴的 3D 旋转。 rotateY(angle) 定义沿着 Y 轴的 3D 旋转。 rotateZ(angle) 定义沿着 Z 轴的 3D 旋转。 skew(x-angle,y-angle) 定义沿着 X 和 Y 轴的 2D 倾斜转换。 skewX(angle) 定义沿着 X 轴的 2D 倾斜转换。 skewY(angle) 定义沿着 Y 轴的 2D 倾斜转换。 perspective(n) 为 3D 转换元素定义透视视图。 transform:scale(1.1,1.1); jq animation12345678910111213141516171819202122232425var flag = 0; function gotoTop() &#123; $(window).scroll(function() &#123; var sc = $(window).scrollTop(); var rheight = $(window).height() if (sc &gt; rheight * 0.6 &amp;&amp; flag === 0) &#123; $($(&quot;.top&quot;)[0]).animate(&#123; bottom: 30 &#125;, 500); flag = 1; &#125; else if (sc &lt; rheight * 0.6 &amp;&amp; flag === 1) &#123; $($(&quot;.top&quot;)[0]).animate(&#123; bottom: -50 &#125;, 500); flag = 0; &#125; &#125;); $($(&quot;.top&quot;)[0]).click(function() &#123; var sc = $(window).scrollTop(); $(&apos;body,html&apos;).animate(&#123; scrollTop: 0 &#125;, 300); return false; &#125;); &#125; css3滤镜http://www.zhangxinxu.com/study/201311/css-filter-image-blur.html http://www.runoob.com/cssref/css3-pr-filter.html1234567891011121314151617181920212223242526272829303132333435363738394041424344454647&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;style&gt;img &#123; width: 100%; height: auto; float: left; &#125;.blur &#123; filter: url(blur.svg#blur); /* FireFox, Chrome, Opera */ -webkit-filter: blur(10px); /* Chrome, Opera */ -moz-filter: blur(10px); -ms-filter: blur(10px); filter: blur(10px); filter: progid:DXImageTransform.Microsoft.Blur(PixelRadius=10, MakeShadow=false); /* IE6~IE9 */&#125;&#125;.brightness &#123;-webkit-filter: brightness(0.30);filter: brightness(0.30);&#125;.contrast &#123;-webkit-filter: contrast(180%);filter: contrast(180%);&#125;.grayscale &#123;-webkit-filter: grayscale(100%);filter: grayscale(100%);&#125;.huerotate &#123;-webkit-filter: hue-rotate(180deg);filter: hue-rotate(180deg);&#125;.invert &#123;-webkit-filter: invert(100%);filter: invert(100%);&#125;.opacity &#123;-webkit-filter: opacity(50%);filter: opacity(50%);&#125;.saturate &#123;-webkit-filter: saturate(7); filter: saturate(7);&#125;.sepia &#123;-webkit-filter: sepia(100%);filter: sepia(100%);&#125;.shadow &#123;-webkit-filter: drop-shadow(8px 8px 10px green);filter: drop-shadow(8px 8px 10px green);&#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt; Internet Explorer 不支持 filter 属性。&lt;/p&gt;&lt;img src=&quot;img/car/01/vm-h-x9slive-bg-mini.jpg&quot; alt=&quot;Pineapple&quot;&gt;&lt;img class=&quot;blur&quot; src=&quot;img/car/01/vm-h-x9slive-bg-mini.jpg&quot; alt=&quot;Pineapple&quot;&gt;&lt;img class=&quot;brightness&quot; src=&quot;img/car/01/vm-h-x9slive-bg-mini.jpg&quot; alt=&quot;Pineapple&quot;&gt;&lt;img class=&quot;contrast&quot; src=&quot;img/car/01/vm-h-x9slive-bg-mini.jpg&quot; alt=&quot;Pineapple&quot;&gt;&lt;img class=&quot;grayscale&quot; src=&quot;img/car/01/vm-h-x9slive-bg-mini.jpg&quot; alt=&quot;Pineapple&quot;&gt;&lt;img class=&quot;huerotate&quot; src=&quot;img/car/01/vm-h-x9slive-bg-mini.jpg&quot; alt=&quot;Pineapple&quot;&gt;&lt;img class=&quot;invert&quot; src=&quot;img/car/01/vm-h-x9slive-bg-mini.jpg&quot; alt=&quot;Pineapple&quot;&gt;&lt;img class=&quot;opacity&quot; src=&quot;img/car/01/vm-h-x9slive-bg-mini.jpg&quot; alt=&quot;Pineapple&quot;&gt;&lt;img class=&quot;saturate&quot; src=&quot;img/car/01/vm-h-x9slive-bg-mini.jpg&quot; alt=&quot;Pineapple&quot;&gt;&lt;img class=&quot;sepia&quot; src=&quot;img/car/01/vm-h-x9slive-bg-mini.jpg&quot; alt=&quot;Pineapple&quot;&gt;&lt;img class=&quot;shadow&quot; src=&quot;img/car/01/vm-h-x9slive-bg-mini.jpg&quot; alt=&quot;Pineapple&quot;&gt;&lt;/body&gt;&lt;/html&gt; 解决display 和 transition冲突使用1visibility:visible; visibility:hidden; 12345678910111213141516171819#vivio-product-link:hover .vivio-product &#123; visibility:visible; opacity: 1; display: block; background-color: rgba(255, 255, 255, 1);&#125;#vivio-product-link .vivio-product &#123; visibility:hidden; width: 100%; position: absolute; background-color: rgba(255, 255, 255, 0); z-index: 999; opacity: 0; -webkit-transition-property: all; -webkit-transition-duration: 0.5s; -webkit-transition-timing-function: ease; left: 0;&#125; 媒体查询1234567891011@media (max-width:767px)&#123;&#125;@media (min-width:767px) and (max-width:992px) &#123;&#125;@media (min-width:992px)and (max-width:1270px) &#123;&#125;@media (min-width:1270px) &#123;&#125; white-space: nowrap 规定段落中的文本不进行换行 css after 元素的内容之后插入新内容 vertical-align:该属性定义行内元素的基线相对于该元素所在行的基线的垂直对齐。允许指定负长度值和百分比值。这会使元素降低而不是升高。在表单元格中，这个属性会设置单元格框中的单元格内容的对齐方式。 :before和::before的区别http://www.alixixi.com/web/a/2012030779081.shtml css 动画循环123456789101112131415161718192021222324252627282930313233343536373839&lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset=&quot; utf-8&quot;&gt; &lt;meta name=&quot;author&quot; content=&quot;http://www.softwhy.com/&quot; /&gt; &lt;title&gt;test&lt;/title&gt; &lt;style&gt;@-webkit-keyframes gogogo &#123; 0% &#123; -webkit-transform: rotate(0deg); border: 5px solid red; &#125; 50% &#123; -webkit-transform: rotate(180deg); background: black; border: 5px solid yellow; &#125; 100% &#123; -webkit-transform: rotate(360deg); background: white; border: 5px solid red; &#125;&#125;.loading &#123; border: 5px solid black; border-radius: 40px; width: 28px; height: 188px; -webkit-animation: gogogo 2s infinite linear; margin: 100px;&#125; &lt;/style&gt;&lt;script type=&quot;text/javascript&quot;&gt; &lt;/script&gt; &lt;/head&gt; &lt;body&gt;&lt;div class=&quot;loading&quot;&gt;&lt;/div&gt;&lt;/body&gt; &lt;/html&gt; JQuery 动画循环http://blog.csdn.net/cyp18408251336/article/details/52738924 在浏览器的标签页显示网站标志图标（或指定图标）的方法http://www.cnblogs.com/theWayToAce/p/5558705.html]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[webpack笔记]]></title>
      <url>%2F2017%2F05%2F07%2Fwebpack%2F</url>
      <content type="text"><![CDATA[什么是webpack webpack的github网址 webpack 官网 webpack是用于现代JavaScript应用程序的模块绑定器。当Webpack处理您的应用程序时，它会递归地构建一个包含应用程序所需的每个模块的依赖关系图，然后将所有这些模块打包成少量浏览器加载的软件包（通常只有一个）。 安装webpacknpm install webpack -g npm install webpack -vnpm install webpack -h webpack中文文档https://doc.webpack-china.org/ Webpack 中文指南 http://www.css88.com/doc/webpack2/configuration/plugins/ http://www.jianshu.com/p/9e06d4e859ab 新建entry.js运行 - 生成 bundle.js1webpack entry.js bundle.js 安装加载器npm install css-loader style-loader 新建style.css123body&#123; background-color: rgba(0,0,0,0.3);&#125; 在entry.js中使用加载器 用css-loader读取style.css，再用style-loader把style.css插入页面中1require(&quot;!style-loader!css-loader!./style.css&quot;); 使用配置文件webpack.config.js 在根目录下，新建webpack.config.js1234567891011121314const webpack = require(&apos;webpack&apos;); //载入一个webpack全局变量module.exports = &#123; entry: &apos;./entry.js&apos;, //入口js文件 output: &#123; filename: &apos;bundle.js&apos;, //输出的文件名 path: __dirname //输入的路径 &#125;, module: &#123; loaders: [ &#123;test: /\.css$/, loader: &apos;style-loader!css-loader&apos;&#125; ] &#125;&#125;; 注意：如果有报错- Cannot find module ‘webpack’ 1)当前目录是否有package.json若没有则执行1npm init 2)查找node_modules文件夹是否有webpack文件夹若没有则执行1npm install --save-dev webpack 插件 在github或者官网找插件新建插件1)修改 webpack.config.js，添加 plugins：1234567891011121314151617var webpack = require(&apos;webpack&apos;)module.exports = &#123; entry: &apos;./entry.js&apos;, output: &#123; path: __dirname, filename: &apos;bundle.js&apos; &#125;, module: &#123; loaders: [ &#123;test: /\.css$/, loader: &apos;style-loader!css-loader&apos;&#125; ] &#125;, plugins: [ new webpack.BannerPlugin(&apos;This file is created by mingming&apos;) ]&#125; 2)运行 webpack，打开 bundle.js，可以看到文件头部出现了我们指定的注释信息：12345/*! This file is created by mingming *//******/ (function(modules) &#123; // webpackBootstrap/******/ // The module cache/******/ var installedModules = &#123;&#125;;// 后面代码省略 引用插件 html-webpack-plugin 自动生成html插件 -会在指定目录下生成一个index.html 1)添加html-webpack-plugin插件到node_modules文件夹1npm install html-webpack-plugin --save-dev 2)在webpack.config.js中，使用 html-webpack-plugin插件123456789101112131415161718192021222324252627282930313233/* * @Author: admin * @Date: 2017-07-17 13:43:20 * @Last Modified by: admin * @Last Modified time: 2017-07-17 16:18:10 */&apos;use strict&apos;;const webpack = require(&apos;webpack&apos;); //载入一个webpack全局变量const HtmlWebpackPlugin=require(&apos;html-webpack-plugin&apos;);//引入插件module.exports = &#123; entry: &apos;./entry.js&apos;, //入口js文件 output: &#123; filename: &apos;bundle.js&apos;, //输出的文件名 // path: path.resolve(__dirname, &apos;dist&apos;) path: __dirname //输入的路径 &#125;, module: &#123; loaders: [&#123; test: /\.css$/, loader: &apos;style-loader!css-loader&apos; &#125;] &#125;, plugins: [ new webpack.BannerPlugin(&apos;====这是张三创建的文件=====&apos;), new HtmlWebpackPlugin(&#123; &quot;title&quot;:&quot;使用插件生成html文件&quot;, &quot;filename&quot;:&quot;assets/admin.html&quot; &#125;)//使用插件 ]&#125;; 3)执行1webpack 生成了一个assets-admin.html]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[jQuery Easing(jQuery插件)]]></title>
      <url>%2F2017%2F04%2F20%2Fanimate.css%2F</url>
      <content type="text"><![CDATA[下载animate.css animate.css的github地址 animate.css官网 使用方法首先要引入jquery.js12&lt;script type=&quot;text/javascript&quot; src=&quot;http://code.jquery.com/jquery-1.8.3.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;http://gsgd.co.uk/sandbox/jquery/easing/jquery.easing.1.3.js&quot;&gt;&lt;/script&gt; 具体例子12345678910111213$(document).ready(function () &#123; $(&quot;#box&quot;).click(function () &#123; $(this).stop(true, true).animate(&#123; left:&apos;400px&apos; &#125;, 2000, &apos;easeInOutElastic&apos;, function () &#123; $(this).animate(&#123; left: &apos;0px&apos; &#125;, 2000, &apos;easeInOutElastic&apos;); &#125;); &#125;); &#125;); jQuery自定义动画的函数.animate( properties [, duration][, easing] [, complete] )1234properties：一组包含作为动画属性和终值的样式属性和及其值的集合duration(可选)：动画执行时间，其值可以是三种预定速度之一的字符串(&quot;slow&quot;, &quot;normal&quot;, or &quot;fast&quot;)或表示动画时长的毫秒数值(如：1000)easing(可选)：要使用的过渡效果的名称，如：&quot;linear&quot; 或&quot;swing&quot;complete(可选)：在动画完成时执行的函数 我们可以只把我们需要的几种easing放入Javascript文件中（减少代码冗余）,如以下例子1234567891011121314151617jQuery.extend( jQuery.easing, &#123; easeOutExpo: function (x, t, b, c, d) &#123; return (t==d) ? b+c : c * (-Math.pow(2, -10 * t/d) + 1) + b; &#125;, easeOutBounce: function (x, t, b, c, d) &#123; if ((t/=d) &lt; (1/2.75)) &#123; return c*(7.5625*t*t) + b; &#125; else if (t &lt; (2/2.75)) &#123; return c*(7.5625*(t-=(1.5/2.75))*t + .75) + b; &#125; else if (t &lt; (2.5/2.75)) &#123; return c*(7.5625*(t-=(2.25/2.75))*t + .9375) + b; &#125; else &#123; return c*(7.5625*(t-=(2.625/2.75))*t + .984375) + b; &#125; &#125;, &#125;); easing参数可选的值就有以下32种1234567891011121314151617181920212223242526272829303132linearswingeaseInQuadeaseOutQuadeaseInOutQuadeaseInCubiceaseOutCubiceaseInOutCubiceaseInQuarteaseOutQuarteaseInOutQuarteaseInQuinteaseOutQuinteaseInOutQuinteaseInExpoeaseOutExpoeaseInOutExpoeaseInSineeaseOutSineeaseInOutSineeaseInCirceaseOutCirceaseInOutCirceaseInElasticeaseOutElasticeaseInOutElasticeaseInBackeaseOutBackeaseInOutBackeaseInBounceeaseOutBounceeaseInOutBounce 使用jQuery自定义动画函数animate来指定easing效果1234$(myElement).animate(&#123; top: 500, opacity: 1 &#125;, 1000, &apos;easeOutBounce&apos;); jQuery 1.4版本中对animate()方法，easing的方法进行了扩展，支持为每个属性指定easing方法1234$(myElement).animate(&#123; left: [500, &apos;swing&apos;], top: [200, &apos;easeOutBounce&apos;] &#125;); 使用jQuery内置动画函数如slideUp()、slideDown()等来指定easing效果，以下两种方法都可以：123456$(myElement).slideUp(1000, method, callback&#125;); $(myElement).slideUp(&#123; duration: 1000, easing: method, complete: callback &#125;);]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[vue.js实战]]></title>
      <url>%2F2017%2F04%2F07%2Fvue.js%E5%AE%9E%E6%88%98%2F</url>
      <content type="text"><![CDATA[需求分析 外卖app 项目资源准备 psd文件 Mark Man标注 photoshop切图（后期webpack打包） svg文件 ​ vue-router vue-resource es6+elint elint :es6代码风格检查工具 规范团队的代码风格 工程化 组件化 模块化 移动端常用开发技巧 flex弹性布局 css stickyfooter 酷炫的交互色剂 制作图标字体 利用工具将svg文件转成图标字体https://icomoon.io/ 点击IcoMoon App按钮 Import Icons(导入svg文件) 选择要导出的图标 Generate Font (导出字体图标) 预处理css框架stylus 没有花括号，分号 mock数据（模拟后台数据） 在根目录下新建data.json，模拟json数据 在build文件夹下，修改dev-server.js,在var app = express()后加入以下代码 12345678910111213141516171819202122232425262728293031323334// 取数据var appData=require(&apos;../data.json&apos;);var seller =appData.seller;var goods=appData.goods;var ratings=appData.ratings;// 路由var apiRoutes=express.Router();apiRoutes.get(&apos;/seller&apos;,function(req,res)&#123; res.json(&#123; // 标识数据是否正常 errno:0, data:seller &#125;);&#125;);apiRoutes.get(&apos;/goods&apos;,function(req,res)&#123; res.json(&#123; // 标识数据是否正常 errno:0, data:goods &#125;);&#125;);apiRoutes.get(&apos;/rating&apos;,function(req,res)&#123; res.json(&#123; // 标识数据是否正常 errno:0, data:ratings &#125;);&#125;);app.use(&apos;/api&apos;,apiRoutes); 测试编写的api，直接打开浏览器访问http://localhost:8080/api/seller cssreset 在static文件夹下，新建一个css文件夹，新建reset.css文件，用于重置浏览器的标签元素。 http://cssreset.com 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990/** * Eric Meyer&apos;s Reset CSS v2.0 (http://meyerweb.com/eric/tools/css/reset/) * http://cssreset.com */html, body, div, span, applet, object, iframe,h1, h2, h3, h4, h5, h6, p, blockquote, pre,a, abbr, acronym, address, big, cite, code,del, dfn, em, img, ins, kbd, q, s, samp,small, strike, strong, sub, sup, tt, var,b, u, i, center,dl, dt, dd, ol, ul, li,fieldset, form, label, legend,table, caption, tbody, tfoot, thead, tr, th, td,article, aside, canvas, details, embed,figure, figcaption, footer, header,menu, nav, output, ruby, section, summary,time, mark, audio, video, input &#123; margin: 0; padding: 0; border: 0; font-size: 100%; font-weight: normal; vertical-align: baseline;&#125;/* HTML5 display-role reset for older browsers */article, aside, details, figcaption, figure,footer, header, menu, nav, section &#123; display: block;&#125;body &#123; line-height: 1;&#125;blockquote, q &#123; quotes: none;&#125;blockquote:before, blockquote:after,q:before, q:after &#123; content: none;&#125;table &#123; border-collapse: collapse; border-spacing: 0;&#125;/* custom */a &#123; color: #7e8c8d; text-decoration: none; -webkit-backface-visibility: hidden;&#125;li &#123; list-style: none;&#125;::-webkit-scrollbar &#123; width: 5px; height: 5px;&#125;::-webkit-scrollbar-track-piece &#123; background-color: rgba(0, 0, 0, 0.2); -webkit-border-radius: 6px;&#125;::-webkit-scrollbar-thumb:vertical &#123; height: 5px; background-color: rgba(125, 125, 125, 0.7); -webkit-border-radius: 6px;&#125;::-webkit-scrollbar-thumb:horizontal &#123; width: 5px; background-color: rgba(125, 125, 125, 0.7); -webkit-border-radius: 6px;&#125;html, body &#123; width: 100%;&#125;body &#123; -webkit-text-size-adjust: none; -webkit-tap-highlight-color: rgba(0, 0, 0, 0);&#125; 注意：记得在index.html页面中引入reset.css 1&lt;link rel=&quot;stylesheet&quot; href=&quot;static/css/resect.css&quot;&gt; 在index.html页面中，设置移动端视口不能缩放1&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1.0,maximum-scale=1.0,minimum-scale=1.0,user-scalable=no&quot;&gt; 修改main.js有分号 在main.js里面添加分号 123456789101112131415// The Vue build version to load with the `import` command// (runtime-only or standalone) has been set in webpack.base.conf with an alias.import Vue from &apos;vue&apos;;import App from &apos;./App&apos;;import router from &apos;./router&apos;;Vue.config.productionTip = false;/* eslint-disable no-new */new Vue(&#123; el: &apos;#app&apos;, router, template: &apos;&lt;App/&gt;&apos;, components: &#123; App &#125;&#125;); 在.eslintrc.js的rules里面添加 1&apos;semi&apos;:[&apos;error&apos;,&apos;always&apos;] eslint跳过检查 1234567/* eslint-disable no-new */new Vue(&#123; el: &apos;#app&apos;, router, template: &apos;&lt;App/&gt;&apos;, components: &#123; App &#125;&#125;); vue基本模板12345678910&lt;template&gt;&lt;/template&gt;&lt;script type=&apos;text/ecmascript-6&apos;&gt;&lt;/script&gt;&lt;style lang=&apos;stylus&apos; rel=&apos;stylesheet/stylus&apos;&gt; &lt;/style&gt; 安装stylus依赖 在package.json中添加 1&quot;stylus-loader&quot;: &quot;^2.1.1&quot;, 安装依赖 1npm install 重启 1npm run dev 应用组件 App.vue 123456789101112131415161718192021222324&lt;template&gt; &lt;div id=&quot;app&quot;&gt; &lt;v-header&gt;&lt;/v-header&gt; &lt;div class=&quot;tab&quot;&gt; I am tab! &lt;/div&gt; &lt;div class=&quot;content&quot;&gt; I am content! &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import header from &apos;./components/header/header.vue&apos;;export default &#123; // 2.注册，注意：不可以使用关键字 components: &#123; &apos;v-header&apos;: header &#125;&#125;;&lt;/script&gt;&lt;style&gt;&lt;/style&gt; 在components - header文件夹下，新建header.vue 12345678910111213&lt;template&gt; &lt;div class=&quot;header&quot;&gt; 我是header！ &lt;/div&gt;&lt;/template&gt;&lt;script type=&apos;text/ecmascript-6&apos;&gt;/* 配置 */ export default&#123;&#125;;&lt;/script&gt;&lt;style lang=&apos;stylus&apos; rel=&apos;stylesheet/stylus&apos;&gt; &lt;/style&gt; postcss插件自动生成解决兼容性的代码 Vue-router Vue-router的作用Vue-router 就是路由，地址栏输什么，到什么页面，而且vue-router可以通过html5的history实现单页面应用，不刷新跳转，你切地址，只是页面上的组件的切换。另外vue-router还可以实现页面间传参等其他功能。 如何在github上查看哪个个是Vue-router 的最新版本。 打开github官网，搜索Vue-router，查看package.json中有最新版本号npm安装 首先打开package.json 在dependencies依赖中添加， “vue-router”: “^2.5.3” 最后执行以下代码， 1npm install vue-router 注意：安装的时候回有以下报错， 12npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@^1.0.0 (node_modules\chokidar\node_modules\fsevents):npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.1.1: wanted &#123;&quot;os&quot;:&quot;darwin&quot;,&quot;arch&quot;:&quot;any&quot;&#125; (current: &#123;&quot;os&quot;:&quot;win32&quot;,&quot;arch&quot;:&quot;x64&quot;&#125;) 是因为 fsevent是mac osx系统的，在win或者Linux下使用了 所以会有警告，忽略即可 Vue-router的使用(实现tab) 在main.js中加入以下代码 12345import Vue from &apos;vue&apos;;import VueRouter from &apos;vue-router&apos;;/* 安装插件 */Vue.use(VueRmouter); 使用Vue-router 实现 tab tab.vue 1234567891011121314151617181920212223242526272829303132&lt;template&gt; &lt;div class=&quot;tab&quot;&gt; &lt;div class=&quot;tab-item&quot;&gt; &lt;a v-link=&quot;&#123;path:&apos;/goods&apos;&#125;&quot;&gt;商品&lt;/a&gt; &lt;/div&gt; &lt;div class=&quot;tab-item&quot;&gt; &lt;a v-link=&quot;&#123;path:&apos;/ratings&apos;&#125;&quot;&gt;评论&lt;/a&gt; &lt;/div&gt; &lt;div class=&quot;tab-item&quot;&gt; &lt;a v-link=&quot;&#123;path:&apos;/seller&apos;&#125;&quot;&gt;商家&lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;!-- 路由出口 --&gt; &lt;!-- 路由匹配到的组件将渲染在这里 --&gt; &lt;router-view&gt;&lt;/router-view&gt;&lt;/template&gt;&lt;script type=&apos;text/ecmascript-6&apos;&gt;/* 配置 */ export default&#123;&#125;;&lt;/script&gt;&lt;style lang=&apos;stylus&apos; rel=&apos;stylesheet/stylus&apos;&gt; #app .tab display:flex width:100% height:40px line-height:40px .tab-item flex:1 text-align:center&lt;/style&gt; main.js 1234567891011121314151617181920212223242526272829303132// 0. 如果使用模块化机制编程，導入Vue和VueRouter，要调用 Vue.use(VueRouter)// 1. 定义（路由）组件。// 可以从其他文件 import 进来const Goods = &#123; template: &apos;&lt;div&gt;goods&lt;/div&gt;&apos; &#125;const Ratings = &#123; template: &apos;&lt;div&gt;ratings&lt;/div&gt;&apos; &#125;const Seller = &#123; template: &apos;&lt;div&gt;seller&lt;/div&gt;&apos; &#125;// 2. 定义路由// 每个路由应该映射一个组件。 其中&quot;component&quot; 可以是// 通过 Vue.extend() 创建的组件构造器，// 或者，只是一个组件配置对象。// 我们晚点再讨论嵌套路由。const routes = [ &#123; path: &apos;/goods&apos;, component: Goods &#125;, &#123; path: &apos;/ratings&apos;, component: Ratings &#125;, &#123; path: &apos;/seller&apos;, component: Seller &#125;]// 3. 创建 router 实例，然后传 `routes` 配置// 你还可以传别的配置参数, 不过先这么简单着吧。const router = new VueRouter(&#123; routes // （缩写）相当于 routes: routes&#125;)// 4. 创建和挂载根实例。// 记得要通过 router 配置参数注入路由，// 从而让整个应用都有路由功能const app = new Vue(&#123; router&#125;).$mount(&apos;#app&apos;) app.vue 12345678910111213141516171819&lt;template&gt; &lt;div id=&quot;app&quot;&gt; &lt;v-header&gt;&lt;/v-header&gt; &lt;v-tab&gt;&lt;/v-tab&gt; &lt;/div&gt;&lt;/template&gt;4&lt;script&gt;import header from &apos;./components/header/header.vue&apos;;import tab from &apos;./components/tab/tab.vue&apos;;export default &#123; // 2.注册，注意：不可以使用关键字 components: &#123; &apos;v-header&apos;: header, &apos;v-tab&apos;: tab &#125;&#125;;&lt;/script&gt;&lt;style lang=&apos;stylus&apos; rel=&apos;stylesheet/stylus&apos;&gt;&lt;/style&gt;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[常用的知识点]]></title>
      <url>%2F2017%2F03%2F19%2F%E5%AE%9E%E6%88%98%E9%A1%BB%E7%9F%A5%2F</url>
      <content type="text"><![CDATA[改变input中的placeholder的样式1234567891011121314151617::-webkit-input-placeholder &#123; font-size: 14px;&#125;:-moz-placeholder &#123; font-size: 14px;&#125;::-moz-placeholder &#123; /* Mozilla Firefox 19+ */ font-size: 14px;&#125;:-ms-input-placeholder &#123; /* Internet Explorer 10+ */ font-size: 14px;&#125; 取当前元素的下标1var num=$(this).index(); 在页面元素data-中保存数据并取数据 保存数据 1&lt;div class=&quot;item-image&quot; data-image-large=&quot;img/slide_01_2000x410.jpg&quot; data-image-small=&quot;img/slide_01_640x340.jpg&quot; data-image-alt=&quot;haha&quot;&gt;&lt;/div&gt; 取数据 12345678var $itemImages = $(&apos;.item-image&apos;); $itemImages.each(function(i, item) &#123; var $item = $(item); var imgSrc = $item.data(smallScreen ? &apos;image-small&apos; : &apos;image-large&apos;); var imgAlt = $item.data(&apos;image-alt&apos;); $item.html(&apos;&lt;img src=&quot;&apos; + imgSrc + &apos;&quot; alt=&quot;&apos; + imgAlt + &apos;&quot;/&gt;&apos;); $item.css(&apos;backgroundImage&apos;, &apos;url(&apos; + imgSrc + &apos;)&apos;); &#125;); 多了显示…12345overflow: hidden;text-overflow: ellipsis;-webkit-line-clamp: 2;-webkit-box-orient: vertical;display: -webkit-box; 轮播图移动端手指滑动(基于bootstrap) html 12345678910111213141516171819202122232425262728293031323334353637383940&lt;div id=&quot;jd_banner&quot; class=&quot;carousel slide&quot; data-ride=&quot;carousel&quot;&gt; &lt;!-- Indicators指示器 --&gt; &lt;ol class=&quot;carousel-indicators&quot;&gt; &lt;li data-target=&quot;#jd_banner&quot; data-slide-to=&quot;0&quot; class=&quot;active&quot;&gt;&lt;/li&gt; &lt;li data-target=&quot;#jd_banner&quot; data-slide-to=&quot;1&quot;&gt;&lt;/li&gt; &lt;li data-target=&quot;#jd_banner&quot; data-slide-to=&quot;2&quot;&gt;&lt;/li&gt; &lt;li data-target=&quot;#jd_banner&quot; data-slide-to=&quot;3&quot;&gt;&lt;/li&gt; &lt;li data-target=&quot;#jd_banner&quot; data-slide-to=&quot;4&quot;&gt;&lt;/li&gt; &lt;li data-target=&quot;#jd_banner&quot; data-slide-to=&quot;5&quot;&gt;&lt;/li&gt; &lt;li data-target=&quot;#jd_banner&quot; data-slide-to=&quot;6&quot;&gt;&lt;/li&gt; &lt;li data-target=&quot;#jd_banner&quot; data-slide-to=&quot;7&quot;&gt;&lt;/li&gt; &lt;/ol&gt; &lt;!-- Wrapper for slides --&gt; &lt;div class=&quot;carousel-inner&quot; role=&quot;listbox&quot;&gt; &lt;div class=&quot;item active&quot;&gt; &lt;img src=&quot;images/l1.jpg&quot; alt=&quot;...&quot;&gt; &lt;/div&gt; &lt;div class=&quot;item&quot;&gt; &lt;img src=&quot;images/l2.jpg&quot; alt=&quot;...&quot;&gt; &lt;/div&gt; &lt;div class=&quot;item&quot;&gt; &lt;img src=&quot;images/l3.jpg&quot; alt=&quot;...&quot;&gt; &lt;/div&gt; &lt;div class=&quot;item&quot;&gt; &lt;img src=&quot;images/l4.jpg&quot; alt=&quot;...&quot;&gt; &lt;/div&gt; &lt;div class=&quot;item&quot;&gt; &lt;img src=&quot;images/l5.jpg&quot; alt=&quot;...&quot;&gt; &lt;/div&gt; &lt;div class=&quot;item&quot;&gt; &lt;img src=&quot;images/l6.jpg&quot; alt=&quot;...&quot;&gt; &lt;/div&gt; &lt;div class=&quot;item&quot;&gt; &lt;img src=&quot;images/l7.jpg&quot; alt=&quot;...&quot;&gt; &lt;/div&gt; &lt;div class=&quot;item&quot;&gt; &lt;img src=&quot;images/l8.jpg&quot; alt=&quot;...&quot;&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; js 12345678910111213141516171819202122232425262728293031323334$(function()&#123; /* * 轮播图移动端左右滑动，实现图片切换 */ //1.获取手指在轮播图元素上的滑动方向（左右） // 手指触摸开始记录一下手指所在坐标的x坐标 // 结束触摸一瞬间记录最后的手指所在x坐标 // 获取界面上的轮播图组件 var $carousels=$(&apos;.carousel&apos;); var startX; var endX; //偏移量超过30像素时,才确定为移动了 var offset=30; //注册滑动事件 $carousels.on(&apos;touchstart&apos;,function(e)&#123; startX=e.originalEvent.touches[0].clientX; &#125;); $carousels.on(&apos;touchmove&apos;,function(e)&#123; // 无法获取,因为刚结束触摸的瞬间,对clientX已经没有记录 //最后得到的是离开瞬间的值 endX=e.originalEvent.touches[0].clientX; &#125;); $carousels.on(&apos;touchend&apos;,function(e)&#123; var distance=Math.abs(startX-endX); if(distance&gt;offset)&#123; //2.根据获得到的方向选择上一张或者下一张 // 方案一:模拟用户点击事件 // 方案二:使用bt（通过的原生的carousel的方法实现） //http://v3.bootcss.com/javascript/#carousel中的Methods $(this).carousel(startX&gt;endX?&apos;next&apos;:&apos;prev&apos;); &#125; &#125;);&#125;);]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[浏览器兼容]]></title>
      <url>%2F2017%2F03%2F18%2F%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9%2F</url>
      <content type="text"><![CDATA[去掉谷歌浏览器中input标签的背景色1234input:-webkit-autofill &#123;-webkit-box-shadow: 0 0 0px 1000px white inset;border: 1px solid #CCC!important;&#125; 去掉谷歌浏览器中input标签的边框1input,button,select,textarea&#123;outline:none&#125;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[vue.js(基础篇)]]></title>
      <url>%2F2017%2F03%2F17%2Fvue.js(%E5%9F%BA%E7%A1%80%E7%AF%87)%2F</url>
      <content type="text"><![CDATA[vue.js官网 vue.js作者是中国人 数据双向绑定 组件的概念 可以把js\css\html写到一个后缀为.vue的vue文件里。 vue.js开发环境搭建注意：搭建前首先要安装配置好node.js和git安装淘宝npm镜像cnpm12npm install -g cnpm --registry=https://registry.npm.taobao.orgcnpm -v 全局安装 vue-cli12npm install --global vue-clivue 创建一个基于 webpack 模板的新项目1vue init webpack my-project 注意;webpack 表示的是项目模板 my-project表示项目名称 加入所有依赖12cd my-projectcnpm install 运行项目1npm run dev 注意：通过http://localhost:8080/访问 让sublime_text支持vue 在Sublime里面调出package control - Install Package,搜索”Vue Syntax Highlight”,安装。 稍等片刻，重新打开文件 修改src文件夹下面的App.vue文件从.vue到页面 通过webpack工具把.vue文件打包成html、css、jsVue.js组件重要选项 数据、方法、监听12345678910111213141516new Vue(&#123; data:&#123; a:1, b:[] &#125;, methods:&#123; dosomething:function()&#123; this.a++ &#125; &#125;, watch:&#123; //监听a的变化 &apos;a&apos;:function(val,oldVal)&#123; console.log(val,oldVal); &#125; &#125;&#125;) 数据渲染123&lt;p&gt;&#123;&#123;a&#125;&#125;&lt;/p&gt;&lt;p v-text=&apos;a&apos;&gt;&lt;/p&gt;&lt;p v-html=&apos;a&apos;&gt;&lt;/p&gt; 控制块隐藏(v-if直接不渲染DOM元素,v-show渲染了，只是隐藏了)1234567&lt;p v-if=&apos;isShow&apos;&gt;&lt;/p&gt;&lt;p v-show=&apos;isShow&apos;&gt;&lt;/p&gt;new Vue(&#123; data:&#123; isShow:true &#125;&#125;) 渲染循环列表12345678910111213141516171819 &lt;ul&gt; &lt;li v-for=&apos;item in items&apos;&gt; &lt;p v-text=&apos;item.label&apos;&gt;&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; new Vue(&#123; data:&#123; items:[ &#123; label:&apos;apple&apos; &#125;, &#123; label:&apos;banana&apos; &#125; ] &#125;&#125;) 时间绑定123456789&lt;button v-on:click=&apos;doThis&apos;&gt;&lt;/button&gt;&lt;button @click=&apos;doThis&apos;&gt;&lt;/button&gt;methods:&#123; doThis:function(something)&#123; &#125;&#125; 绑定属性12345&lt;img v-bind:src=&apos;imageSrc&apos;&gt;&lt;div :class=&apos;&#123; red:isRed&#125;&apos;&gt;&lt;/div&gt;&lt;div :class=&apos;[classA,classB]&apos;&gt;&lt;/div&gt;&lt;div :class=&apos;[classA,&#123;classB:isB,classC:isC&#125;]&apos;&gt;&lt;/div&gt; v-for123&lt;div v-for=&quot;item in items&quot;&gt; &#123;&#123; item.text &#125;&#125;&lt;/div&gt; 基础代码例子1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253&lt;template&gt; &lt;div id=&quot;app&quot;&gt; &lt;img src=&quot;./assets/logo.png&quot;&gt; &lt;router-view&gt;&lt;/router-view&gt; &lt;p&gt;&#123;&#123;a&#125;&#125;&lt;/p&gt; &lt;p v-text=&apos;a&apos;&gt;&lt;/p&gt; &lt;p v-html=&apos;a&apos;&gt;&lt;/p&gt; &lt;ul&gt; &lt;!-- v-bind:class=&quot;[liClass,liClass2]&quot; --&gt; &lt;li v-for=&apos;item in items&apos; v-bind:class=&quot;&#123; finished: item.isFinished &#125;&quot;&gt; &#123;&#123;item.label&#125;&#125; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; name: &apos;app&apos;, data:function()&#123; return &#123; a:&quot;&lt;h1&gt;mingming&lt;/h1&gt;&quot;, title:&apos;this is a todo list&apos;, items:[ &#123; label:&apos;coding&apos;, isFinished:false &#125;, &#123; label:&apos;walking&apos;, isFinished:true &#125; ], liClass:&apos;thiiisLiClass&apos; &#125; &#125;&#125;&lt;/script&gt;&lt;style&gt;#app &#123; font-family: &apos;Avenir&apos;, Helvetica, Arial, sans-serif; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; text-align: center; color: #2c3e50; margin-top: 60px;&#125;.finished&#123; text-decoration: underline;&#125;&lt;/style&gt; v-on事件绑定12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758&lt;template&gt; &lt;div id=&quot;app&quot;&gt; &lt;img src=&quot;./assets/logo.png&quot;&gt; &lt;router-view&gt;&lt;/router-view&gt; &lt;p v-on:click=&quot;doThis&quot;&gt;&#123;&#123;title&#125;&#125;&lt;/p&gt; &lt;ul&gt; &lt;!-- v-bind:class=&quot;[liClass,liClass2]&quot; --&gt; &lt;li v-for=&apos;item in items&apos; v-bind:class=&quot;&#123; finished: item.isFinished &#125;&quot; v-on:click=&quot;toggleFinished(item)&quot;&gt; &#123;&#123;item.label&#125;&#125; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; name: &apos;app&apos;, data:function()&#123; return &#123; title:&apos;this is a todo list&apos;, items:[ &#123; label:&apos;coding&apos;, isFinished:false &#125;, &#123; label:&apos;walking&apos;, isFinished:true &#125; ], liClass:&apos;thiiisLiClass&apos;, doThis:function(event)&#123; console.log(event); &#125; &#125; &#125;, methods:&#123; toggleFinished:function(item)&#123; item.isFinished=!item.isFinished; &#125; &#125;&#125;&lt;/script&gt;&lt;style&gt;#app &#123; font-family: &apos;Avenir&apos;, Helvetica, Arial, sans-serif; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; text-align: center; color: #2c3e50; margin-top: 60px;&#125;.finished&#123; text-decoration: underline;&#125;&lt;/style&gt; v-model数据双向绑定1234567891011121314151617181920212223242526272829303132333435&lt;template&gt; &lt;div id=&quot;app&quot;&gt; &lt;img src=&quot;./assets/logo.png&quot;&gt; &lt;router-view&gt;&lt;/router-view&gt; &lt;input v-model=&quot;newItem&quot; placeholder=&quot;edit me&quot;&gt; &lt;p&gt;Message is: &#123;&#123; newItem &#125;&#125;&lt;/p&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; name: &apos;app&apos;, data:function()&#123; return &#123; newItem:&apos;&apos; &#125; &#125;&#125;&lt;/script&gt;&lt;style&gt;#app &#123; font-family: &apos;Avenir&apos;, Helvetica, Arial, sans-serif; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; text-align: center; color: #2c3e50; margin-top: 60px;&#125;.finished&#123; text-decoration: underline;&#125;&lt;/style&gt; @keyup.enter用户动态生成数据12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152&lt;template&gt; &lt;div id=&quot;app&quot;&gt; &lt;img src=&quot;./assets/logo.png&quot;&gt; &lt;router-view&gt;&lt;/router-view&gt; &lt;input v-model=&quot;newItem&quot; @keyup.enter=&quot;addNew&quot; placeholder=&quot;edit me&quot;&gt; &lt;p&gt;Message is: &#123;&#123; newItem &#125;&#125;&lt;/p&gt; &lt;ul&gt; &lt;li v-for=&apos;item in items&apos; v-bind:class=&quot;&#123; finished: item.isFinished &#125;&quot; v-on:click=&quot;toggleFinished(item)&quot;&gt; &#123;&#123;item.label&#125;&#125; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; name: &apos;app&apos;, data:function()&#123; return &#123; items:[ ] &#125; &#125;, methods:&#123; addNew:function()&#123; console.log(this.newItem); this.items.push(&#123; label:this.newItem, isFinished:true &#125;); this.newItem=&apos;&apos;; &#125;, toggleFinished:function(item)&#123; item.isFinished=!item.isFinished; &#125; &#125;&#125;&lt;/script&gt;&lt;style&gt;#app &#123; font-family: &apos;Avenir&apos;, Helvetica, Arial, sans-serif; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; text-align: center; color: #2c3e50; margin-top: 60px;&#125;.finished&#123; text-decoration: underline;&#125;&lt;/style&gt; 使用localstorage来储存todolist 导出两个方法 （在src文件夹下，添加store.js文件） 123456789101112131415161718// 导出两个方法// const ES6重定义变量的意思const STORAGE_KEY = &apos;todos-vuejs&apos;export default &#123; fetch() &#123; return JSON.parse(window.localStorage.getItem(STORAGE_KEY) || &apos;[]&apos;); &#125;, save(items) &#123; window.localStorage.setItem(STORAGE_KEY, JSON.stringify(items)); &#125; // 相当于以下代码 // fetch: function() &#123; // return JSON.parse(window.localStorage.getItem(STORAGE_KEY) || &apos;[]&apos;); // &#125;, // save: function(items) &#123; // window.localStorage.setItem(STORAGE_KEY, JSON.stringify(items)); // &#125;&#125; 在APP.vue中导入1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465&lt;template&gt; &lt;div id=&quot;app&quot;&gt; &lt;img src=&quot;./assets/logo.png&quot;&gt; &lt;router-view&gt;&lt;/router-view&gt; &lt;input v-model=&quot;newItem&quot; @keyup.enter=&quot;addNew&quot; placeholder=&quot;edit me&quot;&gt; &lt;p&gt;Message is: &#123;&#123; newItem &#125;&#125;&lt;/p&gt; &lt;ul&gt; &lt;li v-for=&apos;item in items&apos; v-bind:class=&quot;&#123; finished: item.isFinished &#125;&quot; v-on:click=&quot;toggleFinished(item)&quot;&gt; &#123;&#123;item.label&#125;&#125; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;// import Store from &apos;./store.js&apos;// 导入import Store from &apos;./store&apos;console.log(Store);export default &#123; name: &apos;app&apos;, data:function()&#123; return &#123; items: Store.fetch() &#125; &#125;, watch: &#123; items: &#123; handler: function (items) &#123; // 调用(存数据) Store.save(items) &#125;, // 为了发现对象内部值的变化，可以在选项参数中指定 deep: true 。注意监听数组的变动不需要这么做。 deep: true &#125; &#125;, methods:&#123; addNew:function()&#123; console.log(this.newItem); this.items.push(&#123; label:this.newItem, isFinished:true &#125;); this.newItem=&apos;&apos;; &#125;, toggleFinished:function(item)&#123; item.isFinished=!item.isFinished; &#125; &#125;&#125;&lt;/script&gt;&lt;style&gt;#app &#123; font-family: &apos;Avenir&apos;, Helvetica, Arial, sans-serif; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; text-align: center; color: #2c3e50; margin-top: 60px;&#125;.finished&#123; text-decoration: underline;&#125;&lt;/style&gt; 组件划分组件 功能模块—— select、pagenation… 页面区域——header、footer、sidebar… 组件的简单使用 在src-components文件夹下新建文件componentA.vue 12345678910111213141516171819202122232425262728&lt;template&gt; &lt;div class=&quot;hello&quot;&gt; &lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;/h1&gt; &lt;button v-on:click=&apos;onClickMe&apos;&gt;&lt;/button&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; data: function() &#123; return &#123; msg: &apos;hello from component a!&apos; &#125; &#125;, methods:&#123; onClickMe:function()&#123; &#125; &#125;&#125;&lt;/script&gt;&lt;!-- Add &quot;scoped&quot; attribute to limit CSS to this component only --&gt;&lt;style scoped&gt;h1&#123; font-weight: normal;&#125;&lt;/style&gt; 将组件引入到app.vue123456789101112131415161718192021222324252627282930&lt;template&gt; &lt;div id=&quot;app&quot;&gt;&lt;!-- 3.渲染到页面(注意：两种写法都可以) --&gt; &lt;componentA&gt;&lt;/componentA&gt; &lt;component-a&gt;&lt;/component-a&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;// 1.导入// import componentA from &apos;./components/componentA.vue&apos;import componentA from &apos;./components/componentA&apos;export default &#123; name: &apos;app&apos;, // 2.注册 components:&#123; componentA &#125;&#125;&lt;/script&gt;&lt;style&gt;#app &#123; font-family: &apos;Avenir&apos;, Helvetica, Arial, sans-serif; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; text-align: center; color: #2c3e50; margin-top: 60px;&#125;&lt;/style&gt; 父向子组件传参 App.vue 123456789101112131415161718192021222324252627&lt;template&gt; &lt;div id=&quot;app&quot;&gt; &lt;!-- 父组件传信息 --&gt; &lt;component-a msgfromfather=&apos;you die!&apos;&gt;&lt;/component-a&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import componentA from &apos;./components/componentA&apos;export default &#123; name: &apos;app&apos;, components:&#123; componentA &#125;&#125;&lt;/script&gt;&lt;style&gt;#app &#123; font-family: &apos;Avenir&apos;, Helvetica, Arial, sans-serif; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; text-align: center; color: #2c3e50; margin-top: 60px;&#125;&lt;/style&gt; componentA.vue123456789101112131415161718192021222324252627282930313233&lt;template&gt; &lt;div class=&quot;hello&quot;&gt; &lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;/h1&gt; &lt;!-- 3.获取父组件传来的信息 --&gt; &lt;h1&gt;&#123;&#123; msgfromfather &#125;&#125;&lt;/h1&gt; &lt;button v-on:click=&apos;onClickMe&apos;&gt;onClickMe&lt;/button&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; data: function() &#123; return &#123; msg: &apos;hello from component a!&apos; &#125; &#125;, // 2.注册 props:[&apos;msgfromfather&apos;], methods:&#123; onClickMe:function()&#123; // 3.获取父组件传来的信息 console.log(this.msgfromfather); &#125; &#125;&#125;&lt;/script&gt;&lt;!-- Add &quot;scoped&quot; attribute to limit CSS to this component only --&gt;&lt;style scoped&gt;h1&#123; font-weight: normal;&#125;&lt;/style&gt; 子向父组件传信息$emit App.vue 1234567891011121314151617181920212223242526272829303132333435363738&lt;template&gt; &lt;div id=&quot;app&quot;&gt; &lt;!-- 父组收信息 --&gt; &lt;p&gt;child tells me:&#123;&#123;childWords&#125;&#125;&lt;/p&gt; &lt;component-a v-on:child-tell-me-something=&apos;listenToMyBoy&apos;&gt;&lt;/component-a&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import componentA from &apos;./components/componentA&apos;export default &#123; name: &apos;app&apos;, data:function()&#123; return&#123; childWords:&apos;&apos; &#125; &#125;, components:&#123; componentA &#125;, methods:&#123; listenToMyBoy:function(msg)&#123; this.childWords=msg; &#125; &#125;&#125;&lt;/script&gt;&lt;style&gt;#app &#123; font-family: &apos;Avenir&apos;, Helvetica, Arial, sans-serif; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; text-align: center; color: #2c3e50; margin-top: 60px;&#125;&lt;/style&gt; componentA.vue 123456789101112131415161718192021222324252627282930&lt;template&gt; &lt;div class=&quot;hello&quot;&gt; &lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;/h1&gt; &lt;button v-on:click=&apos;onClickMe&apos;&gt;onClickMe&lt;/button&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; data: function() &#123; return &#123; msg: &apos;hello from component a!&apos;, msg1:&apos;hello father&apos; &#125; &#125;, methods:&#123; onClickMe:function()&#123; // 触发父组件的事件 this.$emit(&apos;child-tell-me-something&apos;,this.msg1); &#125; &#125;&#125;&lt;/script&gt;&lt;!-- Add &quot;scoped&quot; attribute to limit CSS to this component only --&gt;&lt;style scoped&gt;h1&#123; font-weight: normal;&#125;&lt;/style&gt; $dispatch 和 $broadcast 已经被弃用 App.vue 1234567891011121314151617181920212223242526272829303132333435363738&lt;template&gt; &lt;div id=&quot;app&quot;&gt; &lt;!-- 父组收信息 --&gt; &lt;p&gt;child tells me:&#123;&#123;childWords&#125;&#125;&lt;/p&gt; &lt;component-a&gt;&lt;/component-a&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import componentA from &apos;./components/componentA&apos;export default &#123; name: &apos;app&apos;, data:function()&#123; return&#123; childWords:&apos;&apos; &#125; &#125;, components:&#123; componentA &#125;, events:&#123; &apos;child-tell-me-something&apos;:function(msg)&#123; this.childWords=msg; &#125; &#125;&#125;&lt;/script&gt;&lt;style&gt;#app &#123; font-family: &apos;Avenir&apos;, Helvetica, Arial, sans-serif; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; text-align: center; color: #2c3e50; margin-top: 60px;&#125;&lt;/style&gt; componentA.vue 123456789101112131415161718192021222324252627282930&lt;template&gt; &lt;div class=&quot;hello&quot;&gt; &lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;/h1&gt; &lt;button v-on:click=&apos;onClickMe&apos;&gt;onClickMe&lt;/button&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; data: function() &#123; return &#123; msg: &apos;hello from component a!&apos;, msg1:&apos;hello father&apos; &#125; &#125;, methods:&#123; onClickMe:function()&#123; // 触发父组件的事件 this.$dispatch(&apos;child-tell-me-something&apos;,this.msg1); &#125; &#125;&#125;&lt;/script&gt;&lt;!-- Add &quot;scoped&quot; attribute to limit CSS to this component only --&gt;&lt;style scoped&gt;h1&#123; font-weight: normal;&#125;&lt;/style&gt; https://github.com/vuejs 脚手架工具https://github.com/vuejs/vue-cli 路由https://github.com/vuejs/vue-router 开发工具 https://github.com/vuejs/vue-devtools]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[vue.js(进阶篇)]]></title>
      <url>%2F2017%2F03%2F17%2Fvue.js(%E8%BF%9B%E9%98%B6%E7%AF%87)%2F</url>
      <content type="text"><![CDATA[需要掌握的内容 vue-resource (数据交互-ajax通信) vue-router 前端路由 Webpack 构建工具 es6 + eslint (es6代码风格检查工具) 规范团队的代码风格 flex弹性布局 css stickyfooter 酷炫的交互设计 vue.js产生背景 旧浏览器逐渐淘汰，移动端需求增加 前端交互越来越多，功能越来越复杂 架构从传统后台MVC向REST API+前端MV*迁移 MV*包括MVC、MVP、MVVM（Vue.js、Angular.js、react.js）MVVM框架什么是MVVM框架 View(视图-DOM) ViewModel(通讯-观察者) Model (数据-Javascript对象)注意：View和Model不能直接通讯的，而是通过ViewModelMVVM框架的优点 针对具有复杂交互逻辑的前端应用 提供基础的架构抽象 通过Ajax数据持久化，保证前端用户体验vue.js介绍 2014年开源，起初是定位不是框架 轻量级的MVVM框架 数据驱动+组件化的前端开发 Github超过25K+的star数，社区完善 清亮、简洁、高效vue.js核心思想数据驱动 DOM 是数据的一种自然映射 Vue.js——ViewModel(DOM Listeners、Directives) 数据的双向绑定 数据响应原理：数据(model)改变驱动视图(view)自动更新组件化 扩展HTML元素，封装可重用的代码 页面上每个独立的可是/可交互区域视为一个组件 每一组件对应一个工程目录，组件所需要的各种资源在这个目录下就近维护。 页面不过是组件的容器，组件可以嵌套自由组合形成完整的页面。 Vue-cli什么是Vue-cli Vue-cli是Vue的脚手架工具（用于便携基础的代码） 帮助我们搞定——目录结构、本地调试、代码部署、热加载、单元测试 https://github.com/vuejs/vue-cli安装Vue-cli 确保node版本在4.0以上 1node -v 安装Vue-cli 1npm install -g vue-cli 查看可以安装的模板 1vue list 创建一个基于 webpack 模板的新项目1vue init webpack sell 会有以下提示： 123456789? Project name sell? Project description A Vue.js project? Author mingming &lt;2324607198@qq.com&gt;? Vue build standalone? Install vue-router? Yes? Use ESLint to lint your code? Yes? Pick an ESLint preset Standard? Setup unit tests with Karma + Mocha? No? Setup e2e tests with Nightwatch? No 如何使用(依次运行以下代码) 123cd sellnpm installnpm run dev 访问http://localhost:8080/ 项目文件介绍 build webpack配置相关 config webpack配置相关 node_modules npm install 安装的依赖代码库 src 存放项目源码 static 存放第三方静态资源 （.gitkeep 作用是当目录为空，也能提交目录到git仓库里，因为git通常会忽略空目录） .babelrc 编译ES6代码为ES5（很多浏览器无法支持ES6） .editorconfig 编辑器的配置 .eslintignore 忽略与法检查的目录文件 .eslintrc.js eslint的配置文件 .gitignore git仓库忽略的文件目录 index.html 入口文件 package.json 项目的配置文件 webpack打包 webpack官网 项目流程 需求分析 脚手架工具 数据mock 架构设计 代码编写 自测 打包]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[会话sessionStorage]]></title>
      <url>%2F2017%2F03%2F17%2F%E4%BC%9A%E8%AF%9DsessionStorage%2F</url>
      <content type="text"><![CDATA[写入12345678910111213var Util = (function() &#123; var prefix = &apos;taobao_&apos;; var StorageGetter = function(key) &#123; return sessionStorage.getItem(prefix + key); &#125; var StorageSetter = function(key, val) &#123; return sessionStorage.setItem(prefix + key, val); &#125; return &#123; StorageGetter: StorageGetter, StorageSetter: StorageSetter &#125;&#125;)(); 读取1Util.StorageGetter(&apos;taobao_login&apos;) 模仿天猫登录案例1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556(function() &#123; &apos;use strict&apos;;// 会话sessionStorage var Util = (function() &#123; var prefix = &apos;taobao_&apos;; var StorageGetter = function(key) &#123; return sessionStorage.getItem(prefix + key); &#125; var StorageSetter = function(key, val) &#123; return sessionStorage.setItem(prefix + key, val); &#125; return &#123; StorageGetter: StorageGetter, StorageSetter: StorageSetter &#125; &#125;)(); function main() &#123; $(&apos;#submit-bt&apos;).click(function()&#123; //验证用户名密码 var username=$(&apos;#username&apos;).val(); var userPassword=$(&apos;#userPassword&apos;).val(); var sex; $.ajax(&#123; type:&quot;get&quot;, url:&apos;./data/user_data.json&apos;, dataType:&quot;json&quot;, success: function (data) &#123; for(var i=0;i&lt;data.total;i++)&#123; if(data.data[i].user==username) &#123; if(data.data[i].password==userPassword) &#123; sex=data.data[i].sex; Util.StorageSetter(&apos;taobao_login&apos;,&apos;success&apos;); Util.StorageSetter(&apos;taobao_name&apos;,username); &#125; &#125; &#125; if(Util.StorageGetter(&apos;taobao_login&apos;)==&apos;success&apos;) &#123; location.href=&apos;index.html&apos;; &#125;else&#123; $(&apos;#show&apos;).html(&apos;&lt;p&gt;你输入的密码和账户名不匹配，是否&lt;a&gt;忘记密码&lt;/a&gt;或&lt;a&gt;忘记会员名&lt;/a&gt;&lt;/p&gt;&apos;) &#125; &#125;, error: function () &#123; alert(&quot;数据请求失败！&quot;); &#125; &#125;); &#125;); &#125; return main();&#125;)();]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[安装集成环境wamp]]></title>
      <url>%2F2017%2F03%2F17%2F%E5%AE%89%E8%A3%85%E9%9B%86%E6%88%90%E7%8E%AF%E5%A2%83wamp%2F</url>
      <content type="text"><![CDATA[下载安装包，点击安装即可修改MySQL数据库密码 打开wamp，点击MySQL-MySQL console 进入控制台后，提示输入密码(不用输入任何密码，因为密码为空)，按回车键进入; 选择mysql数据库; 1USE mysql; 修改root用户密码为hooray 1update user set password=PASSWORD(&apos;hooray&apos;) where user=&apos;root&apos;; 让修改密码的操作生效的。 1flush privileges; 退出。 1quit; 修改端口号 打开my.ini文件 把默认的 port = 3306 修改为你想要的端口号；注意：有两处。 修改MySQL相关配置 打开config.inc.php，确保端口，用户名，密码与自己安装的mysql一直，默认wampservice的mysql密码是为空的。 也就是检查一下参数，123$cfg[&apos;Servers&apos;][$i][&apos;host&apos;] = &apos;localhost&apos;;$cfg[&apos;Servers&apos;][$i][&apos;user&apos;] = &apos;root&apos;;$cfg[&apos;Servers&apos;][$i][&apos;password&apos;] = &apos;mingming2014&apos;;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[webApp]]></title>
      <url>%2F2017%2F03%2F12%2FwebApp%2F</url>
      <content type="text"><![CDATA[jQuery全屏滚动插件fullPage.jsfullPagea网站 fullpage github fullPage.js主要功能 支持鼠标滚动 支持前进后退和键盘控制 多个回调函数 支持手机、平板触摸事件 支持 CSS3 动画 支持窗口缩放 窗口缩放时自动调整 可设置滚动宽度、背景颜色、滚动速度、循环选项、回调、文本对齐方式等等 页面中引入fullPage.js123&lt;script src=&quot;../js/lib/jquery.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;../js/lib/jquery-ui.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;../js/lib/jquery.fullPage.js&quot;&gt;&lt;/script&gt; 也正是否成功引入： 在控制台输入，以下代码 1jQuery(&apos;body&apos;).fullpage 具体使用方法请仔细查看文档fullPagea网站1$(&apos;.page&apos;).trigger(&apos;onLeave&apos;) 1$(&apos;.page&apos;).eq(0).trigger(&apos;onLeave&apos;)]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[项目开发流程]]></title>
      <url>%2F2017%2F03%2F12%2F%E9%A1%B9%E7%9B%AE%E6%B5%81%E7%A8%8B%2F</url>
      <content type="text"><![CDATA[为什么要学习开发流程？ 提升效率 防止背锅 开发流程开发前 产品功能设计 （设计网页原型） 产品经理(ProductManager) MRD文档 (需求文档) 视觉/交互设计 （UI视觉-最终的效果，交互-操作流程） 视觉工程师、交互工程师（又叫美术、美工） UE用户体验 交互设计稿 视觉设计稿（psd） 开发中 技术规划 技术经理（PojectManager）项目开发文档（可行性确认、技术选型、开发/线上环境规划、技术开发方案设计、团队协作方式）产品需求是否合理产品代码是否可以复用复杂项目是否可以拆分 前端开发 前端工程师 FE 后端开发 后端工程师 RD 开发后 测试 测试工程师（QA）对网页代码进行功能/性能测试 OP 上线运维工程师 （代码部署到服务器并对外发布）一般是一个流程一个流程的按顺序开发。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[前端工程师必备的PS技能 基础篇]]></title>
      <url>%2F2017%2F03%2F11%2F%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%BF%85%E5%A4%87%E7%9A%84PS%E6%8A%80%E8%83%BD%E2%80%94%E2%80%94%E5%88%87%E5%9B%BE%E7%AF%87%2F</url>
      <content type="text"><![CDATA[界面设置新建文件设置(1)ctrl+n 新建文件(2)设置文件参数如下（根据当前流行网页的参数设置）预设：自定宽度：1920 像素高度：1080 像素分辨：72 像素/英寸颜色模式：RGB颜色 8位背景内容：透明(3)选择确定，新建文件；也可以选择存储为预设，方便以后使用时，不用再设置参数。 移动工具设置(1)选中移动工具(2)在左上角勾选自动选择，并且改它的值为图层，而不是组。 视图设置(1)视图-显示-勾选中智能参考线(2)视图-标尺(ctrl+r)(3)点击窗口，关闭不需要的面板。或者直接点击面板关闭。并且加入没有的面板。最终保留信息、字符、历史记录、图层面板。(4)选中信息面板，点击右上角小图标。修改面板选项为如下参数： 第一颜色信息模式：RGB颜色， 第二颜色信息模式：RGB颜色， 鼠标坐标标尺单位(R):像素， 状态信息：选中文档大小、文档尺寸。(5)编辑-首选项-单位与标尺 把单位中的区域参数设为： 标尺(R)：像素； 文字(Y):像素；(6)ctrrl+点击图层面板中的图层可以选择该图层，查看图层选区大小 保存工作区窗口-工作区-新建工作区 Photoshop传统切图方式方式一(1)选中切片工具，建立切片(2)文件-存储为web和设备所用格式 方式二(1)将各个部分裁剪(2)添加参考线(3)在选中选中切片工具的情况下，点击上方的基于参考线切片。(4)文件-存储为web和设备所用格式 Photoshop精准切图什么是Photoshop精准切图(1)利用photoShop脚本进行一种更快捷精准的切图方法。(2)自动化切图(3)计算机自动计算，尺度更精准。 Photoshop精准切图具体步骤(1)文件-脚本-将图层导出到文件(2)注意：选中文件类型：PNG-24透明选区、交错、裁剪图层、包含ICC配置文件文件名前缀：images文件夹：images 切图（单个）(1)编辑-首选项-增效工具-勾选启用生成器(2)重新启动photoshop(3)勾选文件-生成-图像资源(4)注意在原png存储的文件夹中多了-assets文件夹(5)重命名目标图层的文件夹如 logo=&gt;logo.png(6)在刚才的-assets文件夹会有对应的新生成图片 如若想生成原来2倍大小的则在(5)中重命名为200% button @2x.jpg 80%的品质button8.jpg最佳为10 注意：可以用同样的方法导出svg、web文件 注意：也可以用抽出资源的方法，导出svg文件 文件-抽出资源 复制css(1)图层-复制css（但是外部引用的不能复制）(2)复制之后在编辑器粘贴即可 图层管理(1)图层类型：穿透/颜色/名称…(2)可以直接收缩 压缩图像方法一(1)文件-存储-TIFF格式(2)TIFF面板的参数设置为： 图像压缩:LZW jpg(有损压缩) 方法二(1)文件-存储为web所用格式]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[使Photoshop专业切图步骤]]></title>
      <url>%2F2017%2F03%2F11%2F%E4%BD%BF%E7%94%A8Photoshop%E4%B8%93%E4%B8%9A%E5%88%87%E5%9B%BE%E6%AD%A5%E9%AA%A4%2F</url>
      <content type="text"><![CDATA[1.用Photoshop打开psd文件2.右键选中需要合并的图层3.ctrl+e 合并图层4.ctrl+点击图层列表中的图片 选中选区5.ctrl+c 复制选区6.ctrl+n 新建psd项目 （注意：图层的大小会根据已复制的内容的大小调整）7.ctrl+v 粘贴选区8.删除背景9.文件-导出-存储为web所用格式 或者按快捷键（alt + shift + ctrl + s）10.预设：png-24 勾选透明度 点击存储]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[zepto（简化的javaScript库）]]></title>
      <url>%2F2017%2F03%2F11%2Fzepto%2F</url>
      <content type="text"><![CDATA[注意：内容不完整，请留意官方网站。 zepto的API是大量参考jquery的API zepto的优势无缝接入和改造现有项目更好的执行效率比较轻量 ##zepto中文网 1使用上zepto和jQuery没有太大区别 下载方式官网上复制粘贴在文件夹下，进入命令行（按住shif+右键），执行以下命令1npm install zepto zepto中的$选择器释放会 $ 标识符的控制用以下语句，这样其他脚本就可以使用它了。1Zepto.noConflict () zepto中的$选择器1$(selector,context) zepto core（API）123456$(selector, [context]) ⇒ collection$(&lt;Zepto collection&gt;) ⇒ same collection$(&lt;DOM nodes&gt;) ⇒ collection$(htmlString) ⇒ collection$(htmlString, attributes) ⇒ collection v1.0+Zepto(function($)&#123; ... &#125;) 12345678910111.$(&apos;#sidebar&apos;).toString()返回一个数组：&quot;[object Array]&quot;2.$(&apos;#sidebar&apos;,&apos;body&apos;)在body中找#sidebar3.可以直接传zepto的结果，返回的还是zepto4.也可以直接传DOM节点,如var dom=document.getElementById(&apos;sidebar&apos;);dom$(dom)5.传入htmlString,会创建新的html元素$(&apos;&lt;div&gt;&apos;) zepto事件自定义事件$.Event12345671.定义名为abc的自定义事件$(document).bind(&apos;abc&apos;,function()&#123; console.log(1);&#125;);2.触发名为abc的自定义事件$(document).trigger(&apos;abc&apos;); Touch events12需要引入touch插件具体细节查看官网 zepto ajax可以实现跨域请求（自带） zepto插件12345678910111.deferred 设计模式（可以替代ajax的callback）2.扩展插件;(function($)&#123; $.extend($.fn, &#123; foo: function()&#123; // `this` refers to the current Zepto collection. // When possible, return the Zepto collection to allow chaining. return this.html(&apos;bar&apos;) &#125; &#125;)&#125;)(Zepto)]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[php基础篇]]></title>
      <url>%2F2017%2F03%2F11%2Fphp%2F</url>
      <content type="text"><![CDATA[php定界符:可以写在页面的任意位置123456789101112131415161718191.标准定界符。 xml风格 常用&lt;?phpphp代码?&gt;2.短标记&lt;?php代码?&gt; 3.asp风格&lt;%php代码%&gt;4.script风格&lt;script language=&apos;php&apos;&gt;php代码&lt;/script&gt; 注意：php代码严格区分大小写php代码每行都要以“;”结尾 php注释：写在php定界符之内121.单行定界符用//2.多行定界符 /* */ php变量12341.定义变量$变量名称=值；2.变量名称第一位必须是字母3.echo打印 预定义变量123456789101.传值接收数据的变量$_GET 数据量小，不安全 经由http get方式传递数据$_POST 数据量大，安全 经由http post方式传递数据$_REQUEST $_GET+$_POST 效率低 get、post方式$_FILES 上传变量 经由http post方式来上传文件传递数据2.会话：临时数据存储空间$_SESSION 在服务器短保存数据$_COOKIE 在客户器短保存数据$_SERVER 系统的环境信息 php中数据类型1234567891011121314151617181920212223一共八种1.基础数据类型（标量类型）字符串 string整型 integer浮点型 float布尔型 boolean注意：单双引号的区别：双引号的代码会执行，单引号的代码不会执行2.复合类型array 数组object 对象特殊类型resource 资源null 空值转义字符：\// 释放变量unset ($m);//返回变量的数据类型var_dump(); 数据类型转换12php弱变量类型（想要转换为的类型）$变量名 运算符123456789101112131415161718191.字符串拼接符 .&lt;?php$str=&quot;abc&quot;;$str1=&quot;efg&quot;;$str2=$str.$str1;echo $str2;2. + - * / % = += -= /= %= .= str=str.str2; str.=str2;3. -- ++4. &gt; &lt; &gt;= &lt;= == ===(全等) !==(全不等)5. &amp;&amp; || ！ !正整数 ！负整数 ===》false ！“0” ====》 true ！“0.0” ====》 false6.三目运算符 a&gt;b？ a：b;7.位运算符 &amp; | &lt;&lt; &gt;&gt; 流程控制121. if2. switch 数组12345678910111213141516171819202122232425262728293031323334353637381.索引數組 （1）直接定义 $arr[0]=123; $arr[1]=&quot;zhangsan&quot;; $arr[2]=&quot;china&quot;; print_r($arr); //打印数组 echo count($arr);//打印数组元素个数 （2）用arry关键字定义 $arr =arry(123,&quot;zhangsan&quot;,&quot;china&quot;);2.关联数组：下标为字符串的数组 （1）直接定义 $arr[&quot;one&quot;]=&quot;中国&quot;; $arr[&quot;demo&quot;]=&quot;美国&quot;; $arr[&quot;test&quot;]=&quot;法国&quot;; echo $arr[&quot;test&quot;]; print_r($arr); //打印数组 （2）用arry关键字定义 $arr=arry(&quot;one&quot;=&gt;&quot;中国&quot;;&quot;demo&quot;=&gt;&quot;美国&quot;;&quot;test&quot;=&gt;&quot;法国&quot;); 3.二维数组 $arr=arry( arry(&quot;zhangsan&quot;,18,&quot;man&quot;); arry(&quot;lisi&quot;,15,&quot;man&quot;); arry(&quot;zhaoli&quot;,16,&quot;sex&quot;=&gt;&quot;woman&quot;); ); $arry[2][0]; $arry[3][&quot;sex&quot;];4.遍历数组 foreach $arr[0]=123; $arr[1]=&quot;zhangsan&quot;; $arr[2]=&quot;china&quot;; foreach($arr as $key=&gt;$val) &#123; echo $key.&quot;----&gt;&quot;.$val.&quot;&lt;br/&gt;&quot;; &#125; 常量1234567891011121314151.系统常量 PHP_OS 操作系统 PHP_VERSION php版本 PHP_SAPI php运行方式 2.自定义常量 define(&quot;NAME&quot;,&quot;val&quot;); 常量名称全大写 3.魔术常量:__FILE__; 当前页面的物理路径__LINE__; 当前的行号__FUNCTION__; 当前的函数名__ClASS__; 当前的类名__METHOD__; 当前的方法名 文件上传123456789图片上传为一个数组Array ( [name] =&gt; 360wallpaper.jpg 文件名称[type] =&gt; image/jpeg 文件的mime类型[tmp_name] =&gt; C:\Windows\Temp\phpB495.tmp 文件的临时位置[error] =&gt; 0 错误信息 也有其他类型 2,3,4,6,7[size] =&gt; 322637 ) 1 文件的大小 move_uploaded_file($uImage[&quot;tmp_name&quot;], &quot;upload/&quot;.$uImage[&quot;name&quot;]);]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[微金所项目实战]]></title>
      <url>%2F2017%2F03%2F11%2Fnote%E9%87%8D%E7%82%B9%2F</url>
      <content type="text"><![CDATA[搭建Bootstrap页面骨架及项目目录结构12345678├─ /weijinsuo/ ··················· 项目所在目录└─┬─ /css/ ······················· 我们自己的CSS文件 ├─ /font/ ······················ 使用到的字体文件 ├─ /img/ ······················· 使用到的图片文件 ├─ /js/ ························ 自己写的JS脚步 ├─ /lib/ ······················· 从第三方下载回来的库（只用不改） ├─ /favicon.ico ················ 站点图标 └─ /index.html ················· 入口文件 约定编码规范HTML约定 在head中引入必要的CSS文件，优先引用第三方的CSS，方便我们自己的样式覆盖 在body末尾引入必要的JS文件，优先引用第三方的JS，注意JS文件之间的依赖关系，比如bootstrap.js依赖jQuery，那就应该先引用jquery.js 然后引用bootstrap.js CSS约定 除了公共级别样式，其余样式全部由 模块前缀 尽量使用 直接子代选择器， 少用间接子代 避免错杀 HTML5文档结构12345678910&lt;!DOCTYPE html&gt;&lt;html lang="zh-CN"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;页面标题&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;/body&gt;&lt;/html&gt; Viewport设置1&lt;meta name="viewport" content="width=device-width, user-scalable=no, initial-scale=1.0"&gt; html中插入视口设置，可以通过emmet meta:vp 插入 浏览器兼容模式1&lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt; html中插入兼容模式设置，可以通过emmet meta:compat 插入 favicon（站点图标）1&lt;link rel="shortcut icon" type="image/x-icon" href="favicon.ico"&gt; html中插入图标链接，可以通过emmet link:favicon 插入 引入相应的第三方文件123456&lt;link rel="stylesheet" href="bootstrap.css"&gt;&lt;link rel="stylesheet" href="my.css"&gt;...&lt;script src="jquery.js"&gt;&lt;/script&gt;&lt;script src="bootstrap.js"&gt;&lt;/script&gt;&lt;script src="my.js"&gt;&lt;/script&gt; 在我们默认的样式表中将默认字体设置为：12345678body&#123; font-family: "Helvetica Neue", Helvetica, Microsoft Yahei, Hiragino Sans GB, WenQuanYi Micro Hei, sans-serif;&#125; 完成页面空结构 先划分好页面中的大容器，然后在具体看每一个容器中单独的情况 1234567891011121314151617181920212223242526&lt;body&gt; &lt;!-- 头部区域 --&gt; &lt;header&gt;&lt;/header&gt; &lt;!-- /头部区域 --&gt; &lt;!-- 广告轮播 --&gt; &lt;section&gt;&lt;/section&gt; &lt;!-- /广告轮播 --&gt; &lt;!-- 特色介绍 --&gt; &lt;section&gt;&lt;/section&gt; &lt;!-- /特色介绍 --&gt; &lt;!-- 立即预约 --&gt; &lt;section&gt;&lt;/section&gt; &lt;!-- /立即预约 --&gt; &lt;!-- 产品推荐 --&gt; &lt;section&gt;&lt;/section&gt; &lt;!-- /产品推荐 --&gt; &lt;!-- 新闻列表 --&gt; &lt;section&gt;&lt;/section&gt; &lt;!-- /新闻列表 --&gt; &lt;!-- 合作伙伴 --&gt; &lt;section&gt;&lt;/section&gt; &lt;!-- /合作伙伴 --&gt; &lt;!-- 脚注区域 --&gt; &lt;footer&gt;&lt;/footer&gt; &lt;!-- /脚注区域 --&gt;&lt;/body&gt; 构建顶部通栏123&lt;header&gt; &lt;div class="topbar"&gt;&lt;/div&gt;&lt;/header&gt; container类 用于定义一个固定宽度且居中的版心 12345678&lt;div class="topbar"&gt; &lt;div class="container"&gt; &lt;!-- 此处的代码会显示在一个固定宽度且居中的容器中 该容器的宽度会跟随屏幕的变化而变化 --&gt; &lt;/div&gt;&lt;/div&gt; 栅格系统 Bootstrap中定义了一套响应式的网格系统， 其使用方式就是将一个容器划分成12列， 然后通过col-xx-xx的类名控制每一列的占比 row类 因为每一个列默认有一个15px的左右外边距 row类的一个作用就是通过左右-15px屏蔽掉这个边距 123&lt;div class="container"&gt; &lt;div class="row"&gt;&lt;/div&gt;&lt;/div&gt; col-\-*类 col-xs-[列数]：在超小屏幕下展示几份 col-sm-[列数]：在小屏幕下展示几份 col-md-[列数]：在中等屏幕下展示几份 col-lg-[列数]：在大屏幕下展示几份 xs : 超小屏幕 手机 (&lt;768px) sm : 小屏幕 平板 (≥768px) md : 中等屏幕 桌面显示器 (≥992px) lg : 大屏幕 大桌面显示器 (≥1200px) 123456&lt;div class="row"&gt; &lt;div class="col-md-2 text-center"&gt;&lt;/div&gt; &lt;div class="col-md-5 text-center"&gt;&lt;/div&gt; &lt;div class="col-md-2 text-center"&gt;&lt;/div&gt; &lt;div class="col-md-3 text-center"&gt;&lt;/div&gt;&lt;/div&gt; 此处顶部通栏已经被划分成四列text-center的作用就是让内部内容居中显示 字体图标####字体图标的引入12345678910111213141516@font-face &#123; font-family: 'itcast'; src: url('../font/MiFie-Web-Font.eot') format('embedded-opentype'), url('../font/MiFie-Web-Font.svg') format('svg'), url('../font/MiFie-Web-Font.ttf') format('truetype'), url('../font/MiFie-Web-Font.woff') format('woff');&#125;[class^="icon-"],[class*=" icon-"] &#123; /*注意上面选择器中间的空格*/ /*我们使用的名为itcast的字体就是上面的@font-face的方式声明的*/ font-family: itcast; font-style: normal;&#125;.icon-mobilephone::before&#123; content: '\e908';&#125; ####字体图标的使用123456789&lt;div class="col-md-2 text-center"&gt; &lt;a class="mobile-link" href="#"&gt; &lt;i class="icon-mobile"&gt;&lt;/i&gt; &lt;span&gt;手机微金所&lt;/span&gt; &lt;!-- 这里使用的是bootstrap中的字体图标 --&gt; &lt;i class="glyphicon glyphicon-chevron-down"&gt;&lt;/i&gt; &lt;img src="..." alt=""&gt; &lt;/a&gt;&lt;/div&gt; 字体文件格式 eot : embedded-opentype svg : svg ttf : truetype woff : woff hover图片展示123.mobile-link:hover &gt; img &#123; display: block;&#125; 按钮样式生成 http://blog.koalite.com/bbg/ 可以通过界面生成一个新的按钮样式 123456789101112131415161718192021222324252627282930313233343536373839404142434445.btn-itcast &#123; color: #ffffff; background-color: #E92322; border-color: #DB3B43;&#125;.btn-itcast:hover,.btn-itcast:focus,.btn-itcast:active,.btn-itcast.active,.open .dropdown-toggle.btn-itcast &#123; color: #ffffff; background-color: #E92322; border-color: #DB3B43;&#125;.btn-itcast:active,.btn-itcast.active,.open .dropdown-toggle.btn-itcast &#123; background-image: none;&#125;.btn-itcast.disabled,.btn-itcast[disabled],fieldset[disabled] .btn-itcast,.btn-itcast.disabled:hover,.btn-itcast[disabled]:hover,fieldset[disabled] .btn-itcast:hover,.btn-itcast.disabled:focus,.btn-itcast[disabled]:focus,fieldset[disabled] .btn-itcast:focus,.btn-itcast.disabled:active,.btn-itcast[disabled]:active,fieldset[disabled] .btn-itcast:active,.btn-itcast.disabled.active,.btn-itcast[disabled].active,fieldset[disabled] .btn-itcast.active &#123; background-color: #E92322; border-color: #DB3B43;&#125;.btn-itcast .badge &#123; color: #E92322; background-color: #ffffff;&#125; 小屏幕隐藏1&lt;div class="topbar hidden-xs hidden-sm"&gt;&lt;/div&gt; 或者 1&lt;div class="topbar visible-md visible-lg"&gt;&lt;/div&gt; hidden-xx : 在某种屏幕下隐藏 visible-xx : 在某种屏幕尺寸下显示 导航通栏 在使用了boostrap过后，大多数界面元素都是通过bootstrap提供好的界面组件修改得来 1234567891011121314151617181920212223242526272829&lt;nav class="navbar navbar-itcast navbar-static-top"&gt; &lt;div class="container"&gt; &lt;div class="navbar-header"&gt; &lt;button id="btn" type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#nav_list" aria-expanded="false"&gt; &lt;span class="sr-only"&gt;切换菜单&lt;/span&gt; &lt;span class="icon-bar"&gt;&lt;/span&gt; &lt;span class="icon-bar"&gt;&lt;/span&gt; &lt;span class="icon-bar"&gt;&lt;/span&gt; &lt;/button&gt; &lt;a class="navbar-brand" href="#"&gt; &lt;i class="icon-icon"&gt;&lt;/i&gt; &lt;i class="icon-logo"&gt;&lt;/i&gt; &lt;/a&gt; &lt;/div&gt; &lt;div id="nav_list" class="collapse navbar-collapse"&gt; &lt;ul class="nav navbar-nav"&gt; &lt;li class="active"&gt;&lt;a href="#"&gt;我要投资&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;我要借款&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;平台介绍&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;新手专区&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;最新动态&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;微论坛&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;ul class="nav navbar-nav navbar-right hidden-sm"&gt; &lt;li&gt;&lt;a href="#"&gt;个人中心&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt;&lt;/nav&gt; Bootstrap扩展 通过bootstrap文档对导航条样式的设置发现，其实本身是有一个类似于主题的概念 navbar-default：默认的外观 navbar-inverse：暗色背景的样式 所以我们希望可以通过自定义一套完整的风格： navbar-itcast 1234.navbar-itcast&#123; ...&#125;...具体代码参考navbar-default实现即可 品牌logo 任然使用字体图标 菜单行高调整 默认样式中菜单的行高为20px，我们可以调整为自己想要的高度 一般都是通过自己的样式去覆盖 轮播图Bootstrap JS插件使用 对于Bootstrap的JS插件，我们只需要将文档实例中的代码粘到我们自己的代码中让后作出相应的样式调整 Bootstrap中轮播图插件叫作Carousel基本的轮播图实现123456789101112131415161718192021222324252627282930313233343536373839404142434445464748&lt;!-- 以下容器就是整个轮播图组件的整体， 注意该盒子必须加上 class="carousel slide" data-ride="carousel" 表示当前是一个轮播图 bootstrap.js会自动为当前元素添加图片轮播的特效--&gt;&lt;div id="轮播图的ID" class="carousel slide" data-ride="carousel"&gt; &lt;!-- ol标签是图片轮播的控制点 --&gt; &lt;ol class="carousel-indicators"&gt; &lt;!-- 每一个li就是一个单独的控制点 data-target属性就是指定当前控制点控制的是哪一个轮播图，其目的是如果界面上有多个轮播图，便于区分到底控制哪一个 data-slide-to属性是指当前的li元素绑定的是第几个轮播项 注意，默认必须给其中某个li加上active，展示的时候就是焦点项目 --&gt; &lt;li data-target="#轮播图的ID" data-slide-to="0" class="active"&gt;&lt;/li&gt; &lt;li data-target="#轮播图的ID" data-slide-to="1"&gt;&lt;/li&gt; &lt;!-- ...更多的 --&gt; &lt;/ol&gt; &lt;!-- .carousel-inner是所有轮播项的容器盒子， 注意role="listbox"代表当前div是一个列表盒子，作用就是给当前div添加一个语义 --&gt; &lt;div class="carousel-inner" role="listbox"&gt; &lt;!-- 每一个.item就是单个轮播项目，注意默认要给第一个轮播项目加上active，表示为焦点 --&gt; &lt;div class="item active"&gt; &lt;!-- 轮播项目中展示的图片 --&gt; &lt;img src="example.jpg" alt="示例图片"&gt; &lt;div class="carousel-caption"&gt; &lt;!-- 标题或说明性文字，如果不需要，直接删除当前div.carousel-caption --&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="item"&gt; &lt;!-- ... --&gt; &lt;/div&gt; &lt;!-- ... --&gt; &lt;/div&gt; &lt;!-- 图片轮播上左右两个控制按钮，分别点击可以滚动到上一张和下一张 --&gt; &lt;!-- 此处需要注意的是 该a链接的href属性必须指向需要控制的轮播图ID --&gt; &lt;!-- 另外a链接中的data-slide="prev"代表点击该链接会滚到上一张，如果设置为next的话则相反 --&gt; &lt;a class="left carousel-control" href="#轮播图的ID" role="button" data-slide="prev"&gt; &lt;span class="glyphicon glyphicon-chevron-left" aria-hidden="true"&gt;&lt;/span&gt; &lt;span class="sr-only"&gt;上一张&lt;/span&gt; &lt;/a&gt; &lt;a class="right carousel-control" href="#轮播图的ID" role="button" data-slide="next"&gt; &lt;span class="glyphicon glyphicon-chevron-right" aria-hidden="true"&gt;&lt;/span&gt; &lt;span class="sr-only"&gt;下一张&lt;/span&gt; &lt;/a&gt;&lt;/div&gt; 由于轮播图片超宽造成的影响 美工为了在不同屏幕下更好地展示将图片两边做的非常宽，但是我们大多数情况的页面宽度都无法满足这样的图片宽度 而且Bootstrap的样式中默认将图片的max-width设置为100%； 造成界面图片缩放 想在一个较小屏幕下展示一个超宽的图片，并让图片居中显示 两种办法： 换用背景图的方式，background-position: center center; 使img元素绝对定位，left:50%，margin-left: -width/2 background使用 将容器的高度固定（410px） 将轮播图改为背景显示 由于可能图片的高度不一定是410px 所以需要设置css3中的background-size background-size length 如 background-size: 100px 100px，将背景图固定到多大尺寸 percentage 如 background-size: 90% 90%，以百分比的形式设置背景大小 cover 1.背景图片等比例缩放 2.让背景图相对较小边放大到目标容器大小结束 如：一张100*200的背景图放到一个300*400的盒子中，最终背景图片的大小是300*600 因为背景图的较小边为100，将100放大到目标容器300的宽度，放大了3倍，最终结果300*600 contain 1.背景图片等比例缩放 2.让背景图相对较大边放大到目标容器大小结束 如：一张100*200的背景图放到一个300*400的盒子中，最终背景图片的大小是200*400 因为背景图的较大边为200，将200放大到目标容器400的高度，放大了2倍，最终结果200*400 democover contain 图片响应式 目的 各种终端都需要正常显示图片 移动端应该使用更小（体积）的图片 实现方式 将元素中直接设置的图片背景删除，换成两个data-属性（如：data-img-sm=”小图路径”，data-img-lg=”大图路径”） 通过JS的方式获取屏幕的宽度； 判断屏幕宽度是否小于一定的值（如：768） 根据判断情况决定使用具体的大图还是小图 12345678910111213141516// 获取屏幕宽度var windowWidth = $(window).width();// 判断屏幕属于大还是小var isSmallScreen = windowWidth &lt; 768;// 根据大小为界面上的每一张轮播图设置背景// $('#main_ad &gt; .carousel-inner &gt; .item') // 获取到的是一个DOM数组（多个元素）$('#main_ad &gt; .carousel-inner &gt; .item').each(function(i, item) &#123; // 因为拿到是DOM对象 需要转换 var $item = $(item); // var imgSrc = $item.data(isSmallScreen ? 'image-xs' : 'image-lg'); var imgSrc = isSmallScreen ? $item.data('image-xs') : $item.data('image-lg'); // 设置背景图片 $item.css('backgroundImage', 'url("' + imgSrc + '")');&#125;); window resize事件 由于上一步我们实现的过程是指在页面加载完成判断一次， 当用户手动调整页面宽度过后没有及时发生变化， 所以我们可以通过window的resize事件中重新完成以上操作来解决这个问题 1234function 窗口变化后执行的函数名()&#123; // 具体的操作&#125;$(window).on('resize', 窗口变化后执行的函数名); 这个事件只会在窗口尺寸发生变化后执行，但是我们需要一开始时执行一次 12...$(window).on('resize', 窗口变化后执行的函数名).trigger('resize'); 小图片不需要使用背景的方式 小图如果还是使用背景的方式，当屏幕特别小时，效果很差 所以当使用小图时，改用img的方式 123456// 因为我们需要小图时 尺寸等比例变化，所以小图时我们使用img方式if (isSmallScreen) &#123; $item.html('&lt;img src="' + imgSrc + '" alt="" /&gt;');&#125; else &#123; $item.empty();&#125; 按照目前的情况，如果是小图展示则不需要给容器加上410px的固定高度 所以我们可以通过CSS媒体查询的方式解决 12345678910111213#main_ad &gt; .carousel-inner &gt; .item &#123; background-repeat: no-repeat; background-position: center center; background-size: cover;&#125;@media (min-width: 768px) &#123; #main_ad &gt; .carousel-inner &gt; .item &#123; height: 410px; &#125;&#125;#main_ad &gt; .carousel-inner &gt; .item &gt; img &#123; width: 100%;&#125; 网站特性网格系统 该板块当屏幕为中等尺寸时分为3列，较小屏幕是分为2列 所以使用网格系统划分 1234&lt;div class="col-sm-6 col-md-4"&gt; &lt;!-- ... --&gt;&lt;/div&gt;&lt;!-- ... --&gt; 媒体对象样式 每一个小块的样式可以通过Bootstrap中的媒体对象样式实现 1234567891011&lt;a href="#"&gt; &lt;div class="media"&gt; &lt;div class="media-left"&gt; &lt;i class="icon-uniE907"&gt;&lt;/i&gt; &lt;/div&gt; &lt;div class="media-body"&gt; &lt;h4 class="media-heading"&gt;支付交易保障&lt;/h4&gt; &lt;p&gt;银联支付全称保证支付安全&lt;/p&gt; &lt;/div&gt; &lt;/div&gt;&lt;/a&gt; 响应式辅助类型 整个板块在超小屏幕下是隐藏起来的 只需要给当前板块加上hidden-xs的class 预约投标pull-left 左边文字段落 pull-right 右边文字段落 投资产品Tab选项卡 选项卡功能可以通过Bootstrap中提供的相应组件实现http://v3.bootcss.com/javascript/#tabs 1234567891011121314151617181920&lt;div class="container"&gt; &lt;!-- 所有的选项卡标签，每个标签点击分别对应面板展示出来 --&gt; &lt;ul class="nav nav-tabs" role="tablist"&gt; &lt;!-- 下面的li定义了一个选项卡的标签，其中a标签的href属性指向的就是对应要展开的面板ID aria-controls属性是说当前a链接控制的是哪个元素（注意此属性和功能无关，只是语义） 注意一定要给a标签加上data-toggle="tab"，如果不加则boostrap无法知道这是一个选项卡标签，也就不会有相应的效果 --&gt; &lt;li role="presentation" class="active"&gt;&lt;a href="#第一个标签的ID" aria-controls="第一个标签的ID" role="tab" data-toggle="tab"&gt;标签页1&lt;/a&gt;&lt;/li&gt; &lt;li role="presentation"&gt;&lt;a href="#第二个标签的ID" aria-controls="第二个标签的ID" role="tab" data-toggle="tab"&gt;标签页2&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;!-- Tab panes --&gt; &lt;div class="tab-content"&gt; &lt;!-- .tab-pane定义当前是一个tab面板，通过id和选项卡标签关联起来 --&gt; &lt;div role="tabpanel" class="tab-pane active" id="第一个标签的ID"&gt; &lt;!-- 标签展开后的内容 --&gt; &lt;/div&gt; &lt;div role="tabpanel" class="tab-pane" id="第二个标签的ID"&gt;...&lt;/div&gt; &lt;/div&gt;&lt;/div&gt; 网格系统 和网站特色板块的网格系统定义一样 ::before ::after1234567891011121314151617181920.panel-czbk &gt; .panel-heading::before,.panel-czbk &gt; .panel-heading::after &#123; content: ' '; width: 16px; height: 16px; border-radius: 8px; background-color: #f0f0f0; position: absolute;&#125;.panel-czbk &gt; .panel-heading::before &#123; top: -8px; left: -8px;&#125;.panel-czbk &gt; .panel-heading::after &#123; bottom: -8px; left: -8px; box-shadow: 0 2px 1px #ccc inset;&#125; tooltip插件 注意，bootstrap中的tooltip插件必须通过js方式初始化 选项卡标签横向滚动 要给ul加一个容器，这个容器有横向滚动条 动态设置ul的宽度，宽度是根据内容大小决定的width= sum (li.width) 新闻资讯Tab选项卡响应式偏移合作伙伴相邻兄弟选择器登录对话框模态框表单样式导航吸顶affix组件深度自定义http://v3.bootcss.com/customize通过 Less 文件修改version 4http://www.cnblogs.com/micua/p/bootstrap-version4-alpha.html]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[markman安装须知(psd标注工具)]]></title>
      <url>%2F2017%2F03%2F11%2Fmarkman%E5%AE%89%E8%A3%85(psd%E6%A0%87%E6%B3%A8)%2F</url>
      <content type="text"><![CDATA[markman基于Adobe Air平台，所以首先安装Adobe Air平台(注意：如果提示安装失败，需要联系管理员，那么安装微软清理工具包msicuu2，卸载原有的Adobe Air，再安装自己需要的Adobe Air平台。)]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[less（预处理css）（css语法的超集）]]></title>
      <url>%2F2017%2F03%2F11%2Fless%2F</url>
      <content type="text"><![CDATA[什么是 Less ？ Less 是一门 CSS 预处理语言，它扩展了 CSS 语言，增加了变量、Mixin、函数等特性，使 CSS 更易维护和扩展。 Less 可以运行在 Node或浏览器端。注意：最终还是要转为css文件。 Less 相关网站less官网less中文网less中文网 （该版本比较旧） 注释12// 转为css文件时，不被保留/* */ 转为css文件时，被保留 使用方法一：1.打开Windows PowerShell 或者cmd2.执行以下代码：-进入对应的盘区，如 E:-进入main.less文件所在的文件夹， cd ··· （如：cd E:\less）-执行以下命令 lessc main.less &gt; main.csslessc less/main.less &gt; css/main.css注意：路径有空格的话，前后一定要加双引号。 方法二：借助less官网1.在body中引入less.min.js文件，用来转换1&lt;script src=&quot;lib/less/less.min.js&quot;&gt;&lt;/script&gt; 2.在主页面中引入less文件1&lt;link rel=&quot;stylesheet/less&quot; href=&quot;less/main.less&quot;&gt; 3.直接在浏览器中查看，使用http的方式（异步请求less文件）也就是服务器环境中使用]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[js调试工具Console命令详解]]></title>
      <url>%2F2017%2F03%2F11%2Fjs%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7Console%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3%2F</url>
      <content type="text"><![CDATA[用Chrome浏览器打开：Profiles Chrome浏览器控制台的使用 (1)显示信息的命令123456789101112131415&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;常用console命令&lt;/title&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;&lt;/head&gt;&lt;body&gt;&lt;script type=&quot;text/javascript&quot;&gt;console.log(&apos;hello&apos;);console.info(&apos;信息&apos;);console.error(&apos;错误&apos;);console.warn(&apos;警告&apos;);&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; (2)占位符 123&lt;script type=&quot;text/javascript&quot;&gt;console.log(&quot;%d年%d月%d日&quot;,2011,3,26);&lt;/script&gt; (3)信息分组 1234567891011121314151617181920212223242526&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;常用console命令&lt;/title&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;&lt;/head&gt;&lt;body&gt;&lt;script type=&quot;text/javascript&quot;&gt;console.group(&quot;第一组信息&quot;); console.log(&quot;第一组第一条:我的XX(http://www.jb51.net)&quot;); console.log(&quot;第一组第二条:xxx(http://jb51.net)&quot;); console.groupEnd(); console.group(&quot;第二组信息&quot;); console.log(&quot;第二组第一条:程序爱好者QQ群： 80535344&quot;); console.log(&quot;第二组第二条:欢迎你加入&quot;); console.groupEnd();&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; (4)查看对象的信息 12345678&lt;script type=&quot;text/javascript&quot;&gt;var info = &#123;blog:&quot;http://www.jb51.net&quot;,QQGroup:80535344,message:&quot;程序爱好者欢迎你的加入&quot;&#125;;console.dir(info);&lt;/script&gt; (5)显示某个节点的内容 1234567891011121314151617&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;常用console命令&lt;/title&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=&quot;info&quot;&gt;&lt;h3&gt;我的博客：www.ido321.com&lt;/h3&gt;&lt;p&gt;程序爱好者:259280570,欢迎你的加入&lt;/p&gt;&lt;/div&gt;&lt;script type=&quot;text/javascript&quot;&gt;var info = document.getElementById(&apos;info&apos;);console.dirxml(info);&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; (6)判断变量是否是真 console.assert()用来判断一个表达式或变量是否为真。如果结果为否，则在控制台输出一条相应信息，并且抛出一个异常。 123456&lt;script type=&quot;text/javascript&quot;&gt; var result = 1; console.assert( result ); var year = 2014; console.assert(year == 2018 );&lt;/script&gt; (7)追踪函数的调用轨迹。 console.trace()用来追踪函数的调用轨迹。 1234567891011&lt;script type=&quot;text/javascript&quot;&gt;/*函数是如何被调用的，在其中加入console.trace()方法就可以了*/ function add(a,b)&#123;console.trace(); return a+b; &#125; var x = add3(1,1); function add3(a,b)&#123;return add2(a,b);&#125; function add2(a,b)&#123;return add1(a,b);&#125; function add1(a,b)&#123;return add(a,b);&#125;&lt;/script&gt; (8)计时功能 console.time()和console.timeEnd()，用来显示代码的运行时间。 1234567&lt;script type=&quot;text/javascript&quot;&gt; console.time(&quot;控制台计时器一&quot;); for(var i=0;i&lt;1000;i++)&#123; for(var j=0;j&lt;1000;j++)&#123;&#125; &#125; console.timeEnd(&quot;控制台计时器一&quot;);&lt;/script&gt; (9)console.profile()的性能分析 性能分析（Profiler）就是分析程序各个部分的运行时间，找出瓶颈所在，使用的方法是console.profile()。 123456789101112131415161718192021&lt;script type=&quot;text/javascript&quot;&gt; function All()&#123;alert(11); for(var i=0;i&lt;10;i++)&#123;funcA(1000);&#125; funcB(10000); &#125; function funcA(count)&#123; for(var i=0;i&lt;count;i++)&#123;&#125; &#125; function funcB(count)&#123; for(var i=0;i&lt;count;i++)&#123;&#125; &#125; console.profile(&apos;性能分析器&apos;); All(); console.profileEnd();&lt;/script&gt;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[GitHub以及Git]]></title>
      <url>%2F2017%2F03%2F11%2Fgithub%E4%BB%A5%E5%8F%8Agit%2F</url>
      <content type="text"><![CDATA[什么是Git？ Git源代码管理工具 版本控制工具 在一个项目中，凡是由开发系统编写的都是源代码 让源代码可以被追溯，主要记录了每次变更了什么，谁主导这次的变化体现了一种开源文化 什么是GitHub？GitHub官网 git提供商 社交化编程 便于协同合作，同步本地的代码仓库 在GitHub官网上新建一个仓库 点击New repository按钮 记录版本号commit为 7dfe51a527b885aefea55261e752827b6e4a0e84注意：给sublime text安装 Git gutter（用于提示Git变更内容） Git安装、配置（Git命令行工具） 首先安装git，到git官网下载 双击git安装包，安装git，记录路径为（D:\Git）。 打开环境编辑页面 在系统变量中，添加GIT_HOME变量，值为D:\Git; 在系统变量中，找到path变量，添加%GIT_HOME%\bin; 测试是否配置成功，打开cmd命令行，输入git –version输出类似于git version 2.12.0.windows.1，则配置成功 SourceTreeSetup_1.4.1 git图形化界面 基于Git命令行的客户端软件 如何使用Git实现项目管理注意：不需要服务器。具体使用方法如下： 在项目文件夹下，打开Git Bash Here（鼠标右键-选择Git Bash Here） 输入命令git init 初始化一个本地仓库（在项目文件夹下，添加了一个.git文件夹，用于记录项目的所有变更信息） 查看本地仓储的状态 默认情况下，是没有跟踪文件 1git status 或者git status -s 跟踪当前目录的所有文件 1git add . 或者 git add --all 指定跟踪哪个文件 1git add + 文件名 需要指定的文件太多的时候，可以建立忽略清单（注意：最好在建立git之前，写好忽略清单，因为.gitignore只能忽略那些原来没有被追踪的文件，如果某些文件已经被纳入了版本管理中，则修改.gitignore是无效的） 1.在项目文件夹下建立一个.gitignore文件（用于说明忽略的文件有哪些）注意：用sublime text编辑器建 ​2.在.gitignore文件里，写上忽略的文件名 ​3.也可以写.js *. /dist表示根目录下的dist 取消跟踪 git rm –cached readme1.txt 删除readme1.txt的跟踪，并保留在本地。 git rm –f readme1.txt 删除readme1.txt的跟踪，并且删除本地文件。 git rm -r –cached . 删除所有跟踪文件，并保留在本地。 提交当前的变更状况到本地仓库文件夹（归档） 12注意：提交之前要添加追踪文件 git add .git commit -m + &apos;版本说明&apos; git diff 查看变更情况 git log 查看提交日志（查看版本号） 强制回退到之前的版本 1234567891011121314git reset + &apos;版本号&apos; (也有别的参数)git reset --hard +&apos;版本号&apos;彻底回退到某个版本，本地的源码也会变为上一个版本的内容git reset --mixed +&apos;版本号&apos;此为默认方式，不带任何参数的git reset，即时这种方式，它回退到某个版本，只保留源码，回退commit和index信息git reset --soft +&apos;版本号&apos;回退到某个版本，只回退了commit的信息，不会恢复到index file一级。如果还要提交，直接commit即可git reset [-q] [&lt;tree-ish&gt;] [--] &lt;paths&gt;…git reset (--patch | -p) [&lt;tree-ish&gt;] [--] [&lt;paths&gt;…]git reset [--soft | --mixed [-N] | --hard | --merge | --keep] [-q] [&lt;commit&gt;] 本地项目管理实例 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109mingming@DESKTOP-2V5JKDR MINGW64 /e/mywork/me1$ git initInitialized empty Git repository in E:/mywork/me1/.git/mingming@DESKTOP-2V5JKDR MINGW64 /e/mywork/me1 (master)$ git add .mingming@DESKTOP-2V5JKDR MINGW64 /e/mywork/me1 (master)$ git statusOn branch masterInitial commitChanges to be committed: (use &quot;git rm --cached &lt;file&gt;...&quot; to unstage) new file: README.md new file: images/background.jpg new file: images/btBg.png new file: images/bulid.jpg new file: images/close.png new file: images/icon/logoIcon.ico new file: images/logoIcon.ico new file: images/mm.jpg new file: images/pic.jpg new file: images/shar.jpg new file: index.html new file: jQuery-share/.idea/jQuery-share.iml new file: jQuery-share/.idea/modules.xml new file: jQuery-share/.idea/workspace.xml new file: jQuery-share/ZeroClipboard.js new file: jQuery-share/ZeroClipboard.swf new file: jQuery-share/css-bg.png new file: jQuery-share/dialog-close.png new file: jQuery-share/jquery-1.11.1.min.js new file: jQuery-share/share.css new file: js/main.js new file: resource.html new file: style/main.css new file: style/reset.css new file: way.htmlmingming@DESKTOP-2V5JKDR MINGW64 /e/mywork/me1 (master)$ git commit -m &apos;第一次提交&apos;[master (root-commit) 758d52a] 第一次提交 25 files changed, 1556 insertions(+) create mode 100644 README.md create mode 100644 images/background.jpg create mode 100644 images/btBg.png create mode 100644 images/bulid.jpg create mode 100644 images/close.png create mode 100644 images/icon/logoIcon.ico create mode 100644 images/logoIcon.ico create mode 100644 images/mm.jpg create mode 100644 images/pic.jpg create mode 100644 images/shar.jpg create mode 100644 index.html create mode 100644 jQuery-share/.idea/jQuery-share.iml create mode 100644 jQuery-share/.idea/modules.xml create mode 100644 jQuery-share/.idea/workspace.xml create mode 100644 jQuery-share/ZeroClipboard.js create mode 100644 jQuery-share/ZeroClipboard.swf create mode 100644 jQuery-share/css-bg.png create mode 100644 jQuery-share/dialog-close.png create mode 100644 jQuery-share/jquery-1.11.1.min.js create mode 100644 jQuery-share/share.css create mode 100644 js/main.js create mode 100644 resource.html create mode 100644 style/main.css create mode 100644 style/reset.css create mode 100644 way.htmlmingming@DESKTOP-2V5JKDR MINGW64 /e/mywork/me1 (master)$ git add .mingming@DESKTOP-2V5JKDR MINGW64 /e/mywork/me1 (master)$ git commit -m &apos;第二次提交&apos;On branch masterChanges not staged for commit: modified: index.htmlno changes added to commitmingming@DESKTOP-2V5JKDR MINGW64 /e/mywork/me1 (master)$ git add .mingming@DESKTOP-2V5JKDR MINGW64 /e/mywork/me1 (master)$ git commit -m &apos;第二次提交&apos;[master 245a34a] 第二次提交 1 file changed, 1 insertion(+), 1 deletion(-)mingming@DESKTOP-2V5JKDR MINGW64 /e/mywork/me1 (master)$ git logcommit 245a34a89d8d6947d0290c3d2cb725f92a9dc2c3Author: mingming &lt;2324607198@qq.com&gt;Date: Fri May 5 00:20:30 2017 +0800 第二次提交commit 758d52aff3d53159c4c8148cb12e3f3793a4dfc2Author: mingming &lt;2324607198@qq.com&gt;Date: Fri May 5 00:19:48 2017 +0800 第一次提交mingming@DESKTOP-2V5JKDR MINGW64 /e/mywork/me1 (master)$ git reset --hard 758d52aff3d53159c4c8148cb12e3f3793a4dfc2HEAD is now at 758d52a 第一次提交 如何利用GitHub把本地文件同步到远端 在GitHub网页上创建一个新的仓库 复制仓库连接 回到本地项目目录，打开Git Bash 在Git Bash上，执行以下代码， 1git remote add origin + &apos;github 仓库连接&apos; 查看远端地址命令， 12git remote git remote -v git status 首先用git fetch返回服务器上的代码 用git rebase origin/master 合并 如果发生冲突了会提示， 然后可以使用git diff查看冲突， 在手工改掉冲突， 在用git add ‘文件名’ 添加修改后文件，最后用git rebase –continue继续没完成的合并 最后将本地文件上传到远端1git push origin master 如果想更改设置，可以使用git config命令。git config –global push.default matching OR git config –global push.default simple；可以使用git config -l 查看配置 如果当前分支与多个主机存在追踪关系，则可以使用 -u 参数指定一个默认主机，这样后面就可以不加任何参数使用git push。 1git push -u origin master 不带任何参数的git push，默认只推送当前分支，这叫做simple方式，还有一种matching方式，会推送所有有对应的远程分支的本地分支， Git 2.0之前默认使用matching，现在改为simple方式。 master指的是master分支的意思。 拉回远端文件在Git Bash上，执行以下代码,1git pull origin master 什么是分支？ 在项目目录下，打开命令行 查看分支 git branch 新建v2分支 git branch v2 切换到v2分支 git checkout v2 (切换前会自动回到，之前分支的最后一次的提交状态) 提交v2分支到远端 git push -u origin v2 将页面托管到GitHub上方法一（利用git） 在项目目录下打开，Git Bash git init git status git add . git status git commit -m ‘第一次提交到本地’ 在GitHub上创建一个新仓库，连接为https://github.com/mingmLiang/aboutMyselft.git 与GitHub建立连接git remote add origin https://github.com/mingmLiang/aboutMyselft.git 同步README.cm文件到本地 1git pull --rebase origin master git push -u origin master git branch gh-pages 创建gh-pages分支，注意分支的名字是固定的 git checkout gh-pages 切换到gh-pages分支 git push -u origin gh-pages 将gh-pages分支同步到远端 通过链接就可以访问了 https://mingmliang.github.io/aboutMyselft/（ GitHub的用户名.github.io/项目名/ ） 方法二（网页版） 点击头像——your profile – Repositories – new – Repository name（存储库、项目名）– 勾上Initialize README 点击Upload files，把需要上传的文件拖动到上传区域，然后提交 回到项目主页–点击setting–找到github pages（source）–选择master branch –save 再次找到github pages，下面多一个地址，直接复制地址打开即可。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[bootstrap进阶篇]]></title>
      <url>%2F2017%2F03%2F11%2Fbootstrap%E9%9A%BE%E7%82%B9%2F</url>
      <content type="text"><![CDATA[扩展按钮使用按钮生成器生成btn-itcase 123456789101112131415161718192021222324252627282930313233343536373839404142434445.btn-itcase &#123; color: #ffffff; background-color: #BD1B46; border-color: #02690C;&#125;.btn-itcase:hover,.btn-itcase:focus,.btn-itcase:active,.btn-itcase.active,.open .dropdown-toggle.btn-itcase &#123; color: #ffffff; background-color: #75334F; border-color: #02690C;&#125;.btn-itcase:active,.btn-itcase.active,.open .dropdown-toggle.btn-itcase &#123; background-image: none;&#125;.btn-itcase.disabled,.btn-itcase[disabled],fieldset[disabled] .btn-itcase,.btn-itcase.disabled:hover,.btn-itcase[disabled]:hover,fieldset[disabled] .btn-itcase:hover,.btn-itcase.disabled:focus,.btn-itcase[disabled]:focus,fieldset[disabled] .btn-itcase:focus,.btn-itcase.disabled:active,.btn-itcase[disabled]:active,fieldset[disabled] .btn-itcase:active,.btn-itcase.disabled.active,.btn-itcase[disabled].active,fieldset[disabled] .btn-itcase.active &#123; background-color: #BD1B46; border-color: #02690C;&#125;.btn-itcase .badge &#123; color: #BD1B46; background-color: #ffffff;&#125; 将代码粘贴到main.css，并且修改html文档btn-default为btn-itcase扩展导航栏在原有的bootstrap中，复制.navbar-default过来再修改成为.navbar-itcast，再在此基础上，修改样式。123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100/*在原有的bootstrap中复制/*在原有的bootstrap中复制.navbar-default过来再修改成为.navbar-itcast过来再修改成为.navbar-itcast*/.navbar-itcast &#123; background-color: #fff; border-color: #f5f5f5;;&#125;.navbar-itcast .navbar-brand &#123; color: #777;&#125;.navbar-itcast .navbar-brand:hover,.navbar-itcast .navbar-brand:focus &#123; color: #5e5e5e; background-color: transparent;&#125;.navbar-itcast .navbar-text &#123; color: #777;&#125;.navbar-itcast .navbar-nav &gt; li &gt; a &#123; color: #777;&#125;.navbar-itcast .navbar-nav &gt; li &gt; a:hover,.navbar-itcast .navbar-nav &gt; li &gt; a:focus &#123; color: #333; background-color: transparent; border-bottom: #BD1B46 2px solid;&#125;.navbar-itcast .navbar-nav &gt; .active &gt; a,.navbar-itcast .navbar-nav &gt; .active &gt; a:hover,.navbar-itcast .navbar-nav &gt; .active &gt; a:focus &#123; color: #555; background-color: transparent; border-bottom: #BD1B46 2px solid;&#125;.navbar-itcast .navbar-nav &gt; .disabled &gt; a,.navbar-itcast .navbar-nav &gt; .disabled &gt; a:hover,.navbar-itcast .navbar-nav &gt; .disabled &gt; a:focus &#123; color: #ccc; background-color: transparent;&#125;.navbar-itcast .navbar-toggle &#123; border-color: #ddd;&#125;.navbar-itcast .navbar-toggle:hover,.navbar-itcast .navbar-toggle:focus &#123; background-color: #ddd;&#125;.navbar-itcast .navbar-toggle .icon-bar &#123; background-color: #888;&#125;.navbar-itcast .navbar-collapse,.navbar-itcast .navbar-form &#123; border-color: #e7e7e7;&#125;.navbar-itcast .navbar-nav &gt; .open &gt; a,.navbar-itcast .navbar-nav &gt; .open &gt; a:hover,.navbar-itcast .navbar-nav &gt; .open &gt; a:focus &#123; color: #555; background-color: #e7e7e7;&#125;@media (max-width: 767px) &#123; .navbar-itcast .navbar-nav .open .dropdown-menu &gt; li &gt; a &#123; color: #777; &#125; .navbar-itcast .navbar-nav .open .dropdown-menu &gt; li &gt; a:hover, .navbar-itcast .navbar-nav .open .dropdown-menu &gt; li &gt; a:focus &#123; color: #333; background-color: transparent; &#125; .navbar-itcast .navbar-nav .open .dropdown-menu &gt; .active &gt; a, .navbar-itcast .navbar-nav .open .dropdown-menu &gt; .active &gt; a:hover, .navbar-itcast .navbar-nav .open .dropdown-menu &gt; .active &gt; a:focus &#123; color: #555; background-color: #e7e7e7; &#125; .navbar-itcast .navbar-nav .open .dropdown-menu &gt; .disabled &gt; a, .navbar-itcast .navbar-nav .open .dropdown-menu &gt; .disabled &gt; a:hover, .navbar-itcast .navbar-nav .open .dropdown-menu &gt; .disabled &gt; a:focus &#123; color: #ccc; background-color: transparent; &#125;&#125;.navbar-itcast .navbar-link &#123; color: #777;&#125;.navbar-itcast .navbar-link:hover &#123; color: #333;&#125;.navbar-itcast .btn-link &#123; color: #777;&#125;.navbar-itcast .btn-link:hover,.navbar-itcast .btn-link:focus &#123; color: #333;&#125;.navbar-itcast .btn-link[disabled]:hover,fieldset[disabled] .navbar-itcast .btn-link:hover,.navbar-itcast .btn-link[disabled]:focus,fieldset[disabled] .navbar-itcast .btn-link:focus &#123; color: #ccc;&#125; 汉堡菜单在bootstrap中复制汉堡菜单代码12345678910&lt;button type=&quot;button&quot; class=&quot;navbar-toggle collapsed&quot; data-toggle=&quot;collapse&quot; data-target=&quot;#bs-example-navbar-collapse-1&quot;&gt; &lt;!--屏幕阅读器专用类名：sr-only，用户不可见--&gt; &lt;span class=&quot;sr-only&quot;&gt;切换菜单&lt;/span&gt; &lt;!--icon-bar汉堡菜单中的是三个杠--&gt; &lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt; &lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt; &lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt; &lt;/button&gt; 在navbar-itcast….中修改样式用一下标签包裹需要隐藏、显示的代码1&lt;div class=&quot;collapse navbar-collapse&quot; id=&quot;bs-example-navbar-collapse-1&quot;&gt; 注意：以下更加实用123456789101112131415161718192021222324252627282930313233343536373839404142434445464748 &lt;nav class=&quot;navbar navbar-itcast navbar-static-top&quot; role=&quot;navigation&quot;&gt; &lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;navbar-header&quot;&gt; &lt;!--class=&quot;navbar-toggle collapsed&quot;声明该按钮是一个切换菜单--&gt; &lt;!--data-target说明切换的数据的位置--&gt; &lt;button type=&quot;button&quot; class=&quot;navbar-toggle collapsed&quot; data-toggle=&quot;collapse&quot; data-target=&quot;#nav_list&quot;&gt; &lt;!--屏幕阅读器专用类名：sr-only，用户不可见--&gt; &lt;span class=&quot;sr-only&quot;&gt;切换菜单&lt;/span&gt; &lt;!--icon-bar汉堡菜单中的是三个杠--&gt; &lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt; &lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt; &lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt; &lt;/button&gt; &lt;a class=&quot;navbar-brand&quot; href=&quot;#&quot;&gt; &lt;i class=&quot;icon-icon&quot;&gt;&lt;/i&gt; &lt;i class=&quot;icon-logo&quot;&gt;&lt;/i&gt; &lt;/a&gt; &lt;/div&gt; &lt;div class=&quot;collapse navbar-collapse&quot; id=&quot;nav_list&quot;&gt; &lt;ul class=&quot;nav navbar-nav&quot;&gt; &lt;li class=&quot;active&quot;&gt; &lt;a href=&quot;#&quot;&gt;我要投资&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;#&quot;&gt;我要借款&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;#&quot;&gt;平台介绍&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;#&quot;&gt;新手专区&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;#&quot;&gt;最新动态&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;#&quot;&gt;微论坛&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;ul class=&quot;nav navbar-nav navbar-right&quot;&gt; &lt;li&gt; &lt;a href=&quot;#&quot;&gt;个人中心&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt;&lt;/nav&gt; 隐藏、显示12&lt;div class=&quot;topBar hidden-sm hidden-xs&quot;&gt;&lt;div class=&quot;topBar visible-md visible-lg&quot;&gt; 浏览器编辑代码同步技巧1.打开开发者选项2.点击Sources3.在左侧栏空白处右键，选择add folder to workspace4.选择与之对应的本地文件5.打开本地网页和网络网页后，选择与之对应的本地网页的当前页面右键点击6.选择Map。。。。（记得允许）7.在浏览器修改即可，就会自动保存到本地文件中 bootstrp自定义方法一：（1）在bootcss中下载，Bootstrap 源码（2）打开less文件夹，修改variables.less，修改相应变量（3）利用修改后的less，生成css文件(注意：编译bootstrap.less)lessc bootstrap.less &gt; bootstrap.css 方法二：（1）进入官网- 定制（2）进行修改（3）修改完之后，最底下有“编译并下载”按钮。 rem和em（可以用来做动态适配）(1)em指的是父级元素的一个font-size(2)rem指的是根元素html的一个font-size]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[bootstrap基础篇]]></title>
      <url>%2F2017%2F03%2F11%2FbootStrap%E7%AE%80%E5%8D%95%2F</url>
      <content type="text"><![CDATA[什么是响应式 传统方式：用不同设备开发不同版本。 响应式设计：使用同一套网页为不同的设备进行适配。 bootStrap一个流行的基于html、css、js（jQuery）的响应式框架 bootStrap的使用 bootStrap下载(学习文档) 进入bootStrap中文网 点击bootStrap3中文文档 点击下载bootStrap 下载用于生产环境的 Bootstrap（用于简单的设计、开发） 注意：也可以使用 Bootstrap 中文网提供的免费 CDN 加速服务1234567891011&lt;!-- 新 Bootstrap 核心 CSS 文件 --&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;http://cdn.bootcss.com/bootstrap/3.3.0/css/bootstrap.min.css&quot;&gt;&lt;!-- 可选的Bootstrap主题文件（一般不用引入） --&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;http://cdn.bootcss.com/bootstrap/3.3.0/css/bootstrap-theme.min.css&quot;&gt;&lt;!-- jQuery文件。务必在bootstrap.min.js 之前引入 --&gt;&lt;script src=&quot;http://cdn.bootcss.com/jquery/1.11.1/jquery.min.js&quot;&gt;&lt;/script&gt;&lt;!-- 最新的 Bootstrap 核心 JavaScript 文件 --&gt;&lt;script src=&quot;http://cdn.bootcss.com/bootstrap/3.3.0/js/bootstrap.min.js&quot;&gt;&lt;/script&gt; 12345678910111213141516171819202122为了确保适当的绘制和触屏缩放，需要在 &lt;head&gt; 之中添加 viewport 元数据标签。快捷方式： meta:vp &lt;!--viewport表示视口，根据设备宽度，调整视口缩放比例--&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt; user-scalable=no不允许用户缩放 &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1,user-scalable=no&quot;&gt; initial-scale初始化缩放 user-scalable=no是否允许用户缩放 minimum-scale:最小缩放 maximum-scale:最大缩放 *************注意： 条件注释：当判断条件满足时，就会执行注释中的html代码；不满足时，就会当做注释忽略掉。 &lt;!--[if lt IE 9]&gt; //让浏览器可以识别html5的新标签 &lt;script src=&quot;http://cdn.bootcss.com/html5shiv/3.7.2/html5shiv.min.js&quot;&gt;&lt;/script&gt; //让低版本浏览器可以使用css3的媒体查询 &lt;script src=&quot;http://cdn.bootcss.com/respond.js/1.4.2/respond.min.js&quot;&gt;&lt;/script&gt; &lt;![endif]--&gt; 基本bootStrap环境搭建好之后，的代码123456789101112131415161718&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;index-响应式&lt;/title&gt; &lt;!--为了确保适当的绘制和触屏缩放，需要在 &lt;head&gt; 之中添加 viewport 元数据标签。--&gt; &lt;!--viewport表示视口，根据设备宽度，调整视口缩放比例--&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt; &lt;!--引入bootStrap的css--&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;./css/bootstrap.min.css&quot; type=&quot;text/css&quot;&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;./css/bootstrap-theme.min.css&quot; type=&quot;text/css&quot;&gt; &lt;!--引入js--&gt; &lt;script src=&quot;./js/jquery-3.1.0.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;./js/bootstrap.min.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; bootStrap的入门（全局css）布局容器123456789(1).container 类用于固定宽度并支持响应式布局的容器。 &lt;div class=&quot;container&quot;&gt; ... &lt;/div&gt;(2).container-fluid 类用于 100% 宽度，占据全部视口（viewport）的容器。 &lt;div class=&quot;container-fluid&quot;&gt; ... &lt;/div&gt; 栅格系统Bootstrap 提供了一套响应式、移动设备优先的流式栅格系统，随着屏幕或视口（viewport）尺寸的增加，系统会自动分为最多12列。它包含了易于使用的预定义类，还有强大的mixin 用于生成更具语义的布局。栅格系统用于通过一系列的行（row）与列（column）的组合来创建页面布局，你的内容就可以放入这些创建好的布局中。 “行（row）”必须包含在 .container （固定宽度）或 .container-fluid （100% 宽度）中，以便为其赋予合适的排列（aligment）和内补（padding）。通过“行（row）”在水平方向创建一组“列（column）”。你的内容应当放置于“列（column）”内，并且，只有“列（column）”可以作为行（row）”的直接子元素。类似 .row 和 .col-xs-4 这种预定义的类，可以用来快速创建栅格布局。Bootstrap 源码中定义的 mixin 也可以用来创建语义化的布局。通过为“列（column）”设置 padding 属性，从而创建列与列之间的间隔（gutter）。通过为 .row 元素设置负值 margin 从而抵消掉为 .container 元素设置的 padding，也就间接为“行（row）”所包含的“列（column）”抵消掉了padding。如果一“行（row）”中包含了的“列（column）”大于 12，多余的“列（column）”所在的元素将被作为一个整体另起一行排列。 组件 进入http://www.bootcss.com 进入bootStrap3组件 实战栅格系统123456789101112131415&lt;!--栅格系统--&gt; &lt;!--注意：row代表现实为一行的内容--&gt; &lt;div class=&quot;row&quot;&gt; &lt;div class=&quot;col-md-4&quot;&gt; &lt;img src=&quot;images/logo.png&quot; alt=&quot;logo&quot;&gt; &lt;/div&gt; &lt;div class=&quot;col-md-4&quot;&gt; &lt;img src=&quot;images/logo.png&quot; alt=&quot;logo&quot;&gt; &lt;/div&gt; &lt;div class=&quot;col-md-4&quot;&gt; &lt;a href=&quot;&quot;&gt;登录&lt;/a&gt; &lt;a href=&quot;&quot;&gt;注册&lt;/a&gt; &lt;a href=&quot;&quot;&gt;购物车&lt;/a&gt; &lt;/div&gt; &lt;/div&gt; 简单响应式原理实现123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;导航条&lt;/title&gt; &lt;!--为了确保适当的绘制和触屏缩放，需要在 &lt;head&gt; 之中添加 viewport 元数据标签。--&gt; &lt;!--viewport表示视口，根据设备宽度，调整视口缩放比例--&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt; &lt;!--引入bootStrap的css--&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;./css/bootstrap.min.css&quot; type=&quot;text/css&quot;&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;./css/bootstrap-theme.min.css&quot; type=&quot;text/css&quot;&gt; &lt;!--引入自定义的css文件--&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;./css/main.css&quot; type=&quot;text/css&quot;&gt; &lt;!--引入js--&gt; &lt;script src=&quot;./js/jquery-3.1.0.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;./js/bootstrap.min.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;div class=&quot;container&quot;&gt; &lt;!--栅格系统--&gt; &lt;!--注意：row代表现实为一行的内容--&gt; &lt;div class=&quot;row&quot;&gt; &lt;div class=&quot;col-md-4&quot;&gt; &lt;img src=&quot;images/logo.png&quot; alt=&quot;logo&quot;&gt; &lt;/div&gt; &lt;div class=&quot;col-md-4&quot;&gt; &lt;img src=&quot;images/logo.png&quot; alt=&quot;logo&quot;&gt; &lt;/div&gt; &lt;div class=&quot;col-md-4&quot;&gt; &lt;a href=&quot;&quot;&gt;登录&lt;/a&gt; &lt;a href=&quot;&quot;&gt;注册&lt;/a&gt; &lt;a href=&quot;&quot;&gt;购物车&lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;nav&gt; &lt;!--navbar-inverse反色导航条--&gt; &lt;nav class=&quot;navbar navbar-inverse row&quot; role=&quot;navigation&quot;&gt; &lt;div class=&quot;container-fluid&quot;&gt; &lt;!-- Brand and toggle get grouped for better mobile display --&gt; &lt;div class=&quot;navbar-header&quot;&gt; &lt;button type=&quot;button&quot; class=&quot;navbar-toggle collapsed&quot; data-toggle=&quot;collapse&quot; data-target=&quot;#bs-example-navbar-collapse-1&quot;&gt; &lt;span class=&quot;sr-only&quot;&gt;Toggle navigation&lt;/span&gt; &lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt; &lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt; &lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt; &lt;/button&gt; &lt;a class=&quot;navbar-brand&quot; href=&quot;#&quot;&gt;Brand&lt;/a&gt; &lt;/div&gt; &lt;!-- Collect the nav links, forms, and other content for toggling --&gt; &lt;div class=&quot;collapse navbar-collapse&quot; id=&quot;bs-example-navbar-collapse-1&quot;&gt; &lt;ul class=&quot;nav navbar-nav&quot;&gt; &lt;li class=&quot;active&quot;&gt;&lt;a href=&quot;#&quot;&gt;Link&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Link&lt;/a&gt;&lt;/li&gt; &lt;li class=&quot;dropdown&quot;&gt; &lt;a href=&quot;#&quot; class=&quot;dropdown-toggle&quot; data-toggle=&quot;dropdown&quot;&gt;Dropdown &lt;span class=&quot;caret&quot;&gt;&lt;/span&gt;&lt;/a&gt; &lt;ul class=&quot;dropdown-menu&quot; role=&quot;menu&quot;&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Action&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Another action&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Something else here&lt;/a&gt;&lt;/li&gt; &lt;li class=&quot;divider&quot;&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Separated link&lt;/a&gt;&lt;/li&gt; &lt;li class=&quot;divider&quot;&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;One more separated link&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;form class=&quot;navbar-form navbar-right&quot; role=&quot;search&quot;&gt; &lt;div class=&quot;form-group&quot;&gt; &lt;input type=&quot;text&quot; class=&quot;form-control&quot; placeholder=&quot;Search&quot;&gt; &lt;/div&gt; &lt;button type=&quot;submit&quot; class=&quot;btn btn-default&quot;&gt;Submit&lt;/button&gt; &lt;/form&gt; &lt;/div&gt;&lt;!-- /.navbar-collapse --&gt; &lt;/div&gt;&lt;!-- /.container-fluid --&gt; &lt;/nav&gt; &lt;/nav&gt; &lt;div class=&quot;row&quot;&gt; &lt;div id=&quot;carousel-example-generic&quot; class=&quot;carousel slide&quot; data-ride=&quot;carousel&quot;&gt; &lt;!-- Indicators --&gt; &lt;ol class=&quot;carousel-indicators&quot;&gt; &lt;li data-target=&quot;#carousel-example-generic&quot; data-slide-to=&quot;0&quot; class=&quot;active&quot;&gt;&lt;/li&gt; &lt;li data-target=&quot;#carousel-example-generic&quot; data-slide-to=&quot;1&quot;&gt;&lt;/li&gt; &lt;li data-target=&quot;#carousel-example-generic&quot; data-slide-to=&quot;2&quot;&gt;&lt;/li&gt; &lt;li data-target=&quot;#carousel-example-generic&quot; data-slide-to=&quot;3&quot;&gt;&lt;/li&gt; &lt;/ol&gt; &lt;!-- Wrapper for slides --&gt; &lt;div class=&quot;carousel-inner&quot; role=&quot;listbox&quot;&gt; &lt;div class=&quot;item active&quot;&gt; &lt;img src=&quot;http://img.mukewang.com/53ad2498000174af13660768.jpg&quot; &gt; &lt;div class=&quot;carousel-caption&quot;&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;item&quot;&gt; &lt;img src=&quot;http://img.mukewang.com/53ad25df0001300613660768.jpg&quot; &gt; &lt;div class=&quot;carousel-caption&quot;&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;item&quot;&gt; &lt;img src=&quot;http://img.mukewang.com/53ad26170001a86013660768.jpg&quot; &gt; &lt;div class=&quot;carousel-caption&quot;&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;item&quot;&gt; &lt;img src=&quot;http://img.mukewang.com/53ad2498000174af13660768.jpg&quot; &gt; &lt;div class=&quot;carousel-caption&quot;&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;!-- Controls --&gt; &lt;a class=&quot;left carousel-control&quot; href=&quot;#carousel-example-generic&quot; role=&quot;button&quot; data-slide=&quot;prev&quot;&gt; &lt;span class=&quot;glyphicon glyphicon-chevron-left&quot;&gt;&lt;/span&gt; &lt;span class=&quot;sr-only&quot;&gt;Previous&lt;/span&gt; &lt;/a&gt; &lt;a class=&quot;right carousel-control&quot; href=&quot;#carousel-example-generic&quot; role=&quot;button&quot; data-slide=&quot;next&quot;&gt; &lt;span class=&quot;glyphicon glyphicon-chevron-right&quot;&gt;&lt;/span&gt; &lt;span class=&quot;sr-only&quot;&gt;Next&lt;/span&gt; &lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;div&gt; &lt;div class=&quot;row&quot;&gt; &lt;h1&gt;最新商品 &lt;img src=&quot;images/lasted.jpg&quot;&gt;&lt;/h1&gt; &lt;/div&gt; &lt;div class=&quot;row&quot;&gt; &lt;!--栅格系统，一共12=10+2--&gt; &lt;div class=&quot;col-md-2&quot;&gt; &lt;img src=&quot;images/1.jpg&quot; &gt; &lt;/div&gt; &lt;div class=&quot;col-md-10&quot;&gt; &lt;!--栅格系统，一共12=6+2+2+2一行--&gt; &lt;div class=&quot;col-md-6&quot;&gt; &lt;img src=&quot;images/2.jpg&quot; &gt; &lt;/div&gt; &lt;!--实现响应式col-md-2 col-sm-4--&gt; &lt;div class=&quot;col-md-2 col-sm-4&quot;&gt; &lt;img src=&quot;images/3.jpg&quot; &gt; &lt;/div&gt; &lt;div class=&quot;col-md-2 col-sm-4&quot;&gt; &lt;img src=&quot;images/3.jpg&quot; &gt; &lt;/div&gt; &lt;div class=&quot;col-md-2 col-sm-4&quot;&gt; &lt;img src=&quot;images/4.jpg&quot; &gt; &lt;/div&gt; &lt;div class=&quot;col-md-2 col-sm-4&quot;&gt; &lt;img src=&quot;images/3.jpg&quot; &gt; &lt;/div&gt; &lt;div class=&quot;col-md-2 col-sm-4&quot;&gt; &lt;img src=&quot;images/3.jpg&quot; &gt; &lt;/div&gt; &lt;div class=&quot;col-md-2 col-sm-4&quot;&gt; &lt;img src=&quot;images/4.jpg&quot; &gt; &lt;/div&gt;&lt;div class=&quot;col-md-2&quot;&gt; &lt;img src=&quot;images/3.jpg&quot; &gt; &lt;/div&gt; &lt;div class=&quot;col-md-2 col-sm-4&quot;&gt; &lt;img src=&quot;images/3.jpg&quot; &gt; &lt;/div&gt; &lt;div class=&quot;col-md-2 col-sm-4&quot;&gt; &lt;img src=&quot;images/4.jpg&quot; &gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;!--实现响应式，hidden-xs小屏幕上隐藏--&gt; &lt;div class=&quot;hidden-xs&quot;&gt; &lt;img src=&quot;images/5.jpg&quot;&gt; &lt;/div&gt; &lt;div class=&quot;visible-lg-block&quot;&gt; &lt;img src=&quot;images/5.jpg&quot; id=&quot;name1&quot;&gt; &lt;/div&gt; &lt;div&gt;&lt;/div&gt; &lt;div&gt;&lt;/div&gt; &lt;footer&gt; &lt;!--版权信息--&gt; &lt;!--注意：居中显示--&gt; &lt;center&gt; 后发生的咖啡机阿斯顿福建爱上课地点积分ids &lt;/center&gt; &lt;/footer&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[ajax基础（js篇）]]></title>
      <url>%2F2017%2F03%2F11%2Fajax%2F</url>
      <content type="text"><![CDATA[​ AJAX = Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）。​ AJAX 是与服务器交换数据并更新部分网页的艺术，在不重新加载整个页面的情况下。AJAX 是一种用于创建快速动态网页的技术。通过在后台与服务器进行少量数据交换，AJAX 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。 ​ 有很多使用 AJAX 的应用程序案例：新浪微博、Google 地图、开心网等等。​ 在 2005 年，Google 通过其 Google Suggest 使 AJAX 变得流行起来。Google Suggest 使用 AJAX 创造出动态性极强的 web 界面：当您在谷歌的搜索框输入关键字时，JavaScript 会把这些字符发送到服务器，然后服务器会返回一个搜索建议的列表 AJAX - 创建 XMLHttpRequest 对象123456789var xmlhttp;if (window.XMLHttpRequest) &#123;// code for IE7+, Firefox, Chrome, Opera, Safari xmlhttp=new XMLHttpRequest(); &#125;else &#123;// code for IE6, IE5 xmlhttp=new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;); &#125; AJAX - 向服务器发送请求如需将请求发送到服务器，我们使用 XMLHttpRequest 对象的 open() 和 send() 方法：12xmlhttp.open(&quot;GET&quot;,&quot;test1.txt&quot;,true);xmlhttp.send(); 方法 描述 open(method,url,async) 规定请求的类型、URL 以及是否异步处理请求。 method：请求的类型；GET 或 POST url：文件在服务器上的位置 async：true（异步）或 false（同步） send(string) 将请求发送到服务器。 string：仅用于 POST 请求 AJAX - 服务器响应 属性 描述 responseText 获得字符串形式的响应数据。 responseXML 获得 XML 形式的响应数据。 responseText 属性返回字符串形式的响应，因此您可以这样使用：1document.getElementById(&amp;quot;myDiv&amp;quot;).innerHTML=xmlhttp.responseTex; 如果来自服务器的响应是 XML，而且需要作为 XML 对象进行解析，请使用 responseXML 属性：12345678xmlDoc=xmlhttp.responseXML; txt=&quot;&quot;; x=xmlDoc.getElementsByTagName(&quot;ARTIST&quot;); for (i=0;i&lt;x.length;i++) &#123; txt=txt + x[i].childNodes[0].nodeValue + &quot;&lt;br /&gt;&quot;; &#125; document.getElementById(&quot;myDiv&quot;).innerHTML=txt; AJAX - onreadystatechange 事件当请求被发送到服务器时，我们需要执行一些基于响应的任务。每当 readyState 改变时，就会触发 onreadystatechange 事件。readyState 属性存有 XMLHttpRequest 的状态信息。 属性 描述 onreadystatechange 存储函数（或函数名），每当 readyState 属性改变时，就会调用该函数。 readyState 存有 XMLHttpRequest 的状态。从 0 到 4 发生变化。 0: 请求未初始化 1: 服务器连接已建立 2: 请求已接收 3: 请求处理中 4: 请求已完成，且响应已就绪 status 200: “OK” 404: 未找到页面 503：服务器端出错 在 onreadystatechange 事件中，我们规定当服务器响应已做好被处理的准备时所执行的任务。当 readyState 等于 4 且状态为 200 时，表示响应已就绪：1234567xmlhttp.onreadystatechange=function() &#123; if (xmlhttp.readyState==4 &amp;&amp; xmlhttp.status==200) &#123; document.getElementById(&quot;myDiv&quot;).innerHTML=xmlhttp.responseText; &#125; &#125;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[使用hexo搭建next主题博客]]></title>
      <url>%2F2017%2F03%2F11%2F%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BAnext%E4%B8%BB%E9%A2%98%E5%8D%9A%E5%AE%A2%2F</url>
      <content type="text"><![CDATA[使用hexo搭建博客 建立一个blog文件夹 进入blog文件夹，打开命令行 npm install -g hexo （注意：已经配置安装了node.js和Git的前提下） git config –global user.email 2324607198@qq.com git config –global user.name mingming ssh-keygen -t rsa -C 2324607198@qq.com // 生成ssh 找到.ssh文件夹打开，使用cat id_rsa.pub //打开公钥ssh串 登陆github，settings － SSH keys － add ssh keys（把上面的内容全部添加进去即可） 测试是否联通 ssh -T git@github.com hexo init hexo generate 生成静态网页 hexo server 访问http://localhost:4000/ 测试hexo是否安装成功 hexo deploy 部署本地文件到远端 访问https://mingmliang.github.io/浏览博客 修改博客主题为next主题 下载next主题包 解压主题包，改名为next，并且放在 E:\blog\themes 目录之下 配置主题，相关内容请参考next说明文档]]></content>
    </entry>

    
  
  
</search>
